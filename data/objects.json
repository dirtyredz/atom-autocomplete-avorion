[
  {
    "text": "Sector",
    "snippet": "Sector()${1}",
    "description": "A new instance of Sector",
    "members": [
      {
        "text": "createStation",
        "snippet": "createStation()${1}",
        "svc": "Server",
        "description": "Convenience function to create a station"
      },
      {
        "text": "createShip",
        "snippet": "createShip()${1}",
        "svc": "Server",
        "description": "Convenience function to create a ship"
      },
      {
        "text": "createAsteroid",
        "snippet": "createAsteroid()${1}",
        "svc": "Server",
        "description": "Convenience function to create an asteroid"
      },
      {
        "text": "createWreckage",
        "snippet": "createWreckage()${1}",
        "svc": "Server",
        "description": "Convenience function to create a wreckage"
      },
      {
        "text": "createObject",
        "snippet": "createObject()${1}",
        "svc": "Server",
        "description": "Convenience function to create a default object"
      },
      {
        "text": "createWormHole",
        "snippet": "createWormHole()${1}",
        "svc": "Server",
        "description": "Convenience function to create a wormhole"
      },
      {
        "text": "createEntity",
        "snippet": "createEntity()${1}",
        "svc": "Server",
        "description": "Creates a new arbitrary entity in the sector"
      },
      {
        "text": "resendEntity",
        "snippet": "resendEntity()${1}",
        "svc": "Server",
        "description": ""
      },
      {
        "text": "dropBundle",
        "snippet": "dropBundle()${1}",
        "svc": "Server",
        "description": ""
      },
      {
        "text": "dropMoney",
        "snippet": "dropMoney()${1}",
        "svc": "Server",
        "description": ""
      },
      {
        "text": "dropResources",
        "snippet": "dropResources()${1}",
        "svc": "Server",
        "description": "Convenience function to create a wormhole"
      },
      {
        "text": "dropCargo",
        "snippet": "dropCargo()${1}",
        "svc": "Server",
        "description": "Convenience function to create a wormhole"
      },
      {
        "text": "dropColor",
        "snippet": "dropColor()${1}",
        "svc": "Server",
        "description": "Convenience function to create a wormhole"
      },
      {
        "text": "dropRandomColor",
        "snippet": "dropRandomColor()${1}",
        "svc": "Server",
        "description": "Convenience function to create a wormhole"
      },
      {
        "text": "dropTurret",
        "snippet": "dropTurret()${1}",
        "svc": "Server",
        "description": "Convenience function to create a wormhole"
      },
      {
        "text": "dropSectorTurret",
        "snippet": "dropSectorTurret()${1}",
        "svc": "Server",
        "description": "Convenience function to create a wormhole"
      },
      {
        "text": "dropUpgrade",
        "snippet": "dropUpgrade()${1}",
        "svc": "Server",
        "description": "Convenience function to create a wormhole"
      },
      {
        "text": "deleteEntity",
        "snippet": "deleteEntity()${1}",
        "svc": "Server",
        "description": "Sets an entity for deletion"
      },
      {
        "text": "deleteEntityJumped",
        "snippet": "deleteEntityJumped()${1}",
        "svc": "Server",
        "description": "Sets an entity for deletion"
      },
      {
        "text": "collectGarbage",
        "snippet": "collectGarbage()${1}",
        "svc": "Server",
        "description": "Immediately deletes all entities in the sector that are set for deletion"
      },
      {
        "text": "resolveScriptPath",
        "snippet": "resolveScriptPath()${1}",
        "svc": "Server",
        "description": ""
      },
      {
        "text": "invokeFunction",
        "snippet": "invokeFunction()${1}",
        "svc": "Server",
        "description": ""
      },
      {
        "text": "addScript",
        "snippet": "addScript()${1}",
        "svc": "Server",
        "description": ""
      },
      {
        "text": "removeScript",
        "snippet": "removeScript()${1}",
        "svc": "Server",
        "description": ""
      },
      {
        "text": "hasScript",
        "snippet": "hasScript()${1}",
        "svc": "Server",
        "description": ""
      },
      {
        "text": "getScripts",
        "snippet": "getScripts()${1}",
        "svc": "Server",
        "description": ""
      },
      {
        "text": "hasEnemies",
        "snippet": "hasEnemies()${1}",
        "svc": "Server",
        "description": "Checks if the given faction has any enemy ships or objects in the sector"
      },
      {
        "text": "getPresentFactions",
        "snippet": "getPresentFactions()${1}",
        "svc": "Server",
        "description": "Returns all indices of all present factions"
      },
      {
        "text": "registerCallback",
        "snippet": "registerCallback()${1}",
        "description": "Register a callback in the sector"
      },
      {
        "text": "unregisterCallback",
        "snippet": "unregisterCallback()${1}",
        "description": ""
      },
      {
        "text": "getCoordinates",
        "snippet": "getCoordinates()${1}",
        "description": "Access the x, y coordinates of the sector"
      },
      {
        "text": "getEntity",
        "snippet": "getEntity()${1}",
        "description": "Find an entity by index in the sector"
      },
      {
        "text": "getEntityByFactionAndName",
        "snippet": "getEntityByFactionAndName()${1}",
        "description": ""
      },
      {
        "text": "getEnemies",
        "snippet": "getEnemies()${1}",
        "svc": "Server",
        "description": "Returns all enemies of the given faction in the sector"
      },
      {
        "text": "getEntities",
        "snippet": "getEntities()${1}",
        "description": "Returns all entities in the sector"
      },
      {
        "text": "getEntitiesByType",
        "snippet": "getEntitiesByType()${1}",
        "description": "Returns all entities in the sector that have a specific type"
      },
      {
        "text": "getEntitiesByScript",
        "snippet": "getEntitiesByScript()${1}",
        "svc": "Server",
        "description": "Returns all entities in the sector that have a specific script attached to them"
      },
      {
        "text": "getEntitiesByComponent",
        "snippet": "getEntitiesByComponent()${1}",
        "description": "Returns all entities in the sector that have a specific component"
      },
      {
        "text": "getEntitiesByComponents",
        "snippet": "getEntitiesByComponents()${1}",
        "description": "Returns all entities in the sector that have a specific set of components"
      },
      {
        "text": "getEntitiesByLocation",
        "snippet": "getEntitiesByLocation()${1}",
        "description": "Returns all entities in the sector whose bounding spheres intersect with the given sphere"
      },
      {
        "text": "getEntitiesByFaction",
        "snippet": "getEntitiesByFaction()${1}",
        "description": "Returns all entities in the sector that belong to the given faction"
      },
      {
        "text": "getPlayers",
        "snippet": "getPlayers()${1}",
        "svc": "Server",
        "description": "Returns all players that are currently in the sector"
      },
      {
        "text": "broadcastChatMessage",
        "snippet": "broadcastChatMessage()${1}",
        "svc": "Server",
        "description": "Broadcast a chat message to all players that are currently in the sector"
      },
      {
        "text": "getValue",
        "snippet": "getValue()${1}",
        "svc": "Server",
        "description": "Retrieves a custom value saved in the entity with the given key"
      },
      {
        "text": "getValues",
        "snippet": "getValues()${1}",
        "svc": "Server",
        "description": "Retrieves all key-value pairs of custom values of the entity"
      },
      {
        "text": "setValue",
        "snippet": "setValue()${1}",
        "svc": "Server",
        "description": "Sets a custom value"
      },
      {
        "text": "createGlow",
        "snippet": "createGlow(${1:pos}, ${2:size}, ${3:color})${20}",
        "svc": "Client",
        "description": ""
      },
      {
        "text": "createSpark",
        "snippet": "createSpark()${1}",
        "svc": "Client",
        "description": ""
      },
      {
        "text": "createExplosion",
        "snippet": "createExplosion()${1}",
        "svc": "Client",
        "description": ""
      },
      {
        "text": "createDustExplosion",
        "snippet": "createDustExplosion()${1}",
        "svc": "Client",
        "description": ""
      },
      {
        "text": "createDust",
        "snippet": "createDust()${1}",
        "svc": "Client",
        "description": ""
      },
      {
        "text": "createHyperspaceAnimation",
        "snippet": "createHyperspaceAnimation()${1}",
        "svc": "Client",
        "description": ""
      },
      {
        "text": "createLaser",
        "snippet": "createLaser()${1}",
        "svc": "Client",
        "description": ""
      },
      {
        "text": "setValue",
        "snippet": "setValue()${1}",
        "svc": "Client",
        "description": ""
      },
      {
        "text": "setValue",
        "snippet": "setValue()${1}",
        "svc": "Client",
        "description": ""
      },
      {
        "text": "setValue",
        "snippet": "setValue()${1}",
        "svc": "Client",
        "description": ""
      }
    ]
  },
  {
    "text": "Player",
    "snippet": "Player()${1}",
    "description": "A new instance of Player",
    "members": [
      {
        "text": "startInteracting",
        "snippet": "startInteracting(${1:entity}, ${2:scriptName}, ${3:optionIndex})${20}",
        "svc": "Server"
      },
      {
        "text": "startBuilding",
        "snippet": "startBuilding(${1:entity})${20}",
        "svc": "Server"
      },
      {
        "text": "buildingAllowed",
        "snippet": "buildingAllowed(${1:entity})${20}",
        "svc": "Server"
      },
      {
        "text": "sendChatMessage",
        "snippet": "sendChatMessage(${1:sender}, ${2:messageType}, ${3:message}, ${4:arguments})${20}",
        "svc": "Server"
      },
      {
        "text": "addMail",
        "snippet": "addMail(${1:mail})${20}",
        "svc": "Server"
      },
      {
        "text": "removeMail",
        "snippet": "removeMail(${1:int})${20}",
        "svc": "Server"
      },
      {
        "text": "clearMail",
        "snippet": "clearMail(${1:int})${20}",
        "svc": "Server"
      },
      {
        "text": "readMail",
        "snippet": "readMail(${1:int})${20}",
        "svc": "Server"
      },
      {
        "text": "updateMail",
        "snippet": "updateMail(${1:mail}, ${2:int})${20}",
        "svc": "Server"
      },
      {
        "text": "getMail",
        "snippet": "getMail(${1:int})${20}"
      },
      {
        "text": "ownsShip",
        "snippet": "ownsShip(${1:string})${20}"
      },
      {
        "text": "getShipNames",
        "snippet": "getShipNames()${1}"
      },
      {
        "text": "getShipCargo",
        "snippet": "getShipCargo(${1:string})${20}"
      },
      {
        "text": "getShipPaymentTime",
        "snippet": "getShipPaymentTime(${1:string})${20}"
      },
      {
        "text": "getShipCrew",
        "snippet": "getShipCrew(${1:string})${20}",
        "svc": "Server"
      },
      {
        "text": "getShipPayment",
        "snippet": "getShipPayment(${1:string})${20}"
      },
      {
        "text": "getShipPlan",
        "snippet": "getShipPlan(${1:string})${20}"
      },
      {
        "text": "getShipPosition",
        "snippet": "getShipPosition(${1:string})${20}"
      },
      {
        "text": "getShipType",
        "snippet": "getShipType(${1:string})${20}",
        "svc": "Server"
      },
      {
        "text": "getSectorCoordinates",
        "snippet": "getSectorCoordinates()${1}",
        "svc": "Server"
      },
      {
        "text": "registerCallback",
        "snippet": "registerCallback(${1:callbackName}, ${2:functionName})${20}"
      },
      {
        "text": "unregisterCallback",
        "snippet": "unregisterCallback(${1:callbackName}, ${2:functionName})${20}"
      },
      {
        "text": "resolveScriptPath",
        "snippet": "resolveScriptPath(${1:path})${20}",
        "svc": "Server"
      },
      {
        "text": "invokeFunction",
        "snippet": "invokeFunction(${1:script}, ${1:functionName}, ${1:arguments})${20}",
        "svc": "Server"
      },
      {
        "text": "addScript",
        "snippet": "addScript(${1:scriptPath}, ${2:arguments})${20}",
        "svc": "Server"
      },
      {
        "text": "addScriptOnce",
        "snippet": "addScriptOnce(${1:scriptPath}, ${2:arguments})${20}",
        "svc": "Server"
      },
      {
        "text": "removeScript",
        "snippet": "removeScript(${1:script})${20}",
        "svc": "Server"
      },
      {
        "text": "getScripts",
        "snippet": "getScripts()${1}"
      },
      {
        "text": "hasScript",
        "snippet": "hasScript(${1:name})${20}"
      },
      {
        "text": "addColor",
        "snippet": "addColor(${1:color})${20}",
        "svc": "Server"
      },
      {
        "text": "getColor",
        "snippet": "getColor(${1:int})${20}",
        "svc": "Server"
      },
      {
        "text": "getRespawnSectorCoordinates",
        "snippet": "getRespawnSectorCoordinates()${1}"
      },
      {
        "text": "setRespawnSectorCoordinates",
        "snippet": "setRespawnSectorCoordinates(${1:int}, ${2:int})${20}",
        "svc": "Server"
      },
      {
        "text": "getRelations",
        "snippet": "getRelations(${1:int})${20}"
      },
      {
        "text": "knowsFaction",
        "snippet": "knowsFaction(${1:int})${20}"
      },
      {
        "text": "getHomeSectorCoordinates",
        "snippet": "getHomeSectorCoordinates(${1:int}, ${2:int})${20}"
      },
      {
        "text": "setHomeSectorCoordinates",
        "snippet": "getHomeSectorCoordinates(${1:int}, ${2:int})${20}",
        "svc": "Server"
      },
      {
        "text": "pay",
        "snippet": "pay(${1:int64_t}, ${2:int64_t...})${20}",
        "svc": "Server"
      },
      {
        "text": "payMoney",
        "snippet": "payMoney(${1:int64_t})${20}",
        "svc": "Server"
      },
      {
        "text": "payResource",
        "snippet": "payResource(${1:material}, ${2:int64_t})${20}",
        "svc": "Server"
      },
      {
        "text": "receive",
        "snippet": "receive(${1:int64_t}, ${2:int64_t...})${20}",
        "svc": "Server"
      },
      {
        "text": "receiveMoney",
        "snippet": "receiveMoney(${1:int64_t})${20}",
        "svc": "Server"
      },
      {
        "text": "receiveResource",
        "snippet": "receiveResource(${1:material}, ${2:int64_t})${20}",
        "svc": "Server"
      },
      {
        "text": "canPay",
        "snippet": "canPay(${1:int64_t}, ${2:int64_t...})${20}"
      },
      {
        "text": "canPayMoney",
        "snippet": "canPayMoney(${1:int64_t})${20}",
        "svc": "Server"
      },
      {
        "text": "canPayResource",
        "snippet": "canPayResource(${1:material}, ${2:int64_t})${20}",
        "svc": "Server"
      },
      {
        "text": "setResources",
        "snippet": "setResources(${1:int64_t...})${20}",
        "svc": "Server"
      },
      {
        "text": "getResources",
        "snippet": "getResources()${1}"
      },
      {
        "text": "getInventory",
        "snippet": "getInventory()${1}"
      },
      {
        "text": "getLanguage",
        "snippet": "getLanguage()${1}",
        "svc": "Server"
      },
      {
        "text": "getShipStyle",
        "snippet": "getShipStyle(${1:dtring})${20}"
      },
      {
        "text": "getStationStyle",
        "snippet": "getStationStyle(${1:string})${20}"
      },
      {
        "text": "getShipStyleNames",
        "snippet": "getShipStyleNames()${1}"
      },
      {
        "text": "getStationStyleNames",
        "snippet": "getStationStyleNames()${1}"
      },
      {
        "text": "createShipStyle",
        "snippet": "createShipStyle(${1:string})${20}",
        "svc": "Server"
      },
      {
        "text": "createStationStyle",
        "snippet": "createStationStyle(${1:string})${20}",
        "svc": "Server"
      },
      {
        "text": "setStaticRelationsToFaction",
        "snippet": "setStaticRelationsToFaction(${1:int}, ${2:bool})${20}",
        "svc": "Server"
      },
      {
        "text": "hasStaticRelationsToFaction",
        "snippet": "hasStaticRelationsToFaction(${1:int})${20}",
        "svc": "Server"
      },
      {
        "text": "getValue",
        "snippet": "getValue(${1:key})${20}",
        "description": "Retrieves a custom value saved in the entity with the given"
      },
      {
        "text": "getValues",
        "snippet": "getValues()${1}",
        "description": "Retrieves all key-value pairs of custom values",
        "svc": "Server"
      },
      {
        "text": "setValue",
        "snippet": "setValue(${1:key}, ${2:value})${20}",
        "description": "Sets a custom value",
        "svc": "Server"
      },
      {
        "text": "setTrait",
        "snippet": "setTrait(${1:trait}, ${2:value})${20}",
        "description": "Sets a trait value associated with a key",
        "svc": "Server"
      },
      {
        "text": "getTrait",
        "snippet": "getTrait(${1:trait})${20}",
        "description": "Retrieves a trait value associated with a key",
        "svc": "Server"
      },
      {
        "text": "getTraits",
        "snippet": "getTraits()${1}",
        "description": "Retrieves all key-value trait pairs of the faction",
        "svc": "Server"
      }
    ],
    "properties": [
      {
        "text": "id",
        "type": "property",
        "svc": "Server"
      },
      {
        "text": "craftIndex",
        "type": "property"
      },
      {
        "text": "numShips",
        "type": "property"
      },
      {
        "text": "numMails",
        "type": "property"
      },
      {
        "text": "numColors",
        "type": "property",
        "svc": "Server"
      },
      {
        "text": "maxNumMails",
        "type": "property"
      },
      {
        "text": "playtime",
        "type": "property",
        "svc": "Server"
      },
      {
        "text": "alliance",
        "type": "property"
      },
      {
        "text": "allianceIndex",
        "type": "property"
      },
      {
        "text": "money",
        "type": "property"
      },
      {
        "text": "name",
        "type": "property"
      },
      {
        "text": "index",
        "type": "property"
      },
      {
        "text": "isPlayer",
        "type": "property",
        "svc": "Server"
      },
      {
        "text": "isAlliance",
        "type": "property",
        "svc": "Server"
      },
      {
        "text": "isAIFaction",
        "type": "property",
        "svc": "Server"
      },
      {
        "text": "color1",
        "type": "property",
        "svc": "Server"
      },
      {
        "text": "color2",
        "type": "property",
        "svc": "Server"
      },
      {
        "text": "color3",
        "type": "property",
        "svc": "Server"
      },
      {
        "text": "initialRelations",
        "type": "property",
        "svc": "Server"
      },
      {
        "text": "initialRelationsToPlayer",
        "type": "property",
        "svc": "Server"
      },
      {
        "text": "infiniteResources",
        "type": "property"
      },
      {
        "text": "staticRelationsToPlayers",
        "type": "property",
        "svc": "Server"
      },
      {
        "text": "staticRelationsToAI",
        "type": "property",
        "svc": "Server"
      },
      {
        "text": "staticRelationsToAll",
        "type": "property",
        "svc": "Server"
      }
    ]
  },
  {
    "text": "Tooltip",
    "snippet": "Tooltip()${1}",
    "description": "A new instance of Tooltip",
    "members": [
      {
        "text": "addLine",
        "snippet": "addLine(${1:line})${20}"
      },
      {
        "text": "getLine",
        "snippet": "getLine(${1:int})${20}"
      }
    ],
    "properties": [
      {
        "text": "icon",
        "type": "property"
      }
    ]
  },
  {
    "text": "TooltipLine",
    "snippet": "TooltipLine(${1:int}, ${2:int})${20}",
    "description": "A new instance of TooltipLine",
    "properties": [
      {
        "text": "ltext",
        "type": "property"
      },
      {
        "text": "lcolor",
        "type": "property"
      },
      {
        "text": "lbold",
        "type": "property"
      },
      {
        "text": "litalic",
        "type": "property"
      },
      {
        "text": "ctext",
        "type": "property"
      },
      {
        "text": "ccolor",
        "type": "property"
      },
      {
        "text": "cbold",
        "type": "property"
      },
      {
        "text": "citalic",
        "type": "property"
      },
      {
        "text": "rtext",
        "type": "property"
      },
      {
        "text": "rcolor",
        "type": "property"
      },
      {
        "text": "rbold",
        "type": "property"
      },
      {
        "text": "ritalic",
        "type": "property"
      },
      {
        "text": "icon",
        "type": "property"
      },
      {
        "text": "height",
        "type": "property"
      },
      {
        "text": "fontSize",
        "type": "property"
      },
      {
        "text": "iconColor",
        "type": "property"
      },
      {
        "text": "backgroundColor",
        "type": "property"
      }
    ]
  },
  {
    "text": "Server",
    "snippet": "Server()${1}",
    "svc": "Server",
    "description": "A new instance of Server",
    "members": [
      {
        "text": "getOnlinePlayers",
        "snippet": "getOnlinePlayers()${1}"
      },
      {
        "text": "getPlayers",
        "snippet": "getPlayers()${1}"
      },
      {
        "text": "stop",
        "snippet": "stop()${1}"
      },
      {
        "text": "save",
        "snippet": "save()${1}"
      },
      {
        "text": "hasAdminPrivileges",
        "snippet": "hasAdminPrivileges(${1:player})${20}"
      },
      {
        "text": "addChatCommand",
        "snippet": "addChatCommand(${1:sender}, ${2:command})${20}"
      },
      {
        "text": "registerCallback",
        "snippet": "registerCallback(${1:callbackName}, ${2:functionName})${20}"
      },
      {
        "text": "unregisterCallback",
        "snippet": "unregisterCallback(${1:callbackName}, ${2:functionName})${20}"
      },
      {
        "text": "broadcastChatMessage",
        "snippet": "broadcastChatMessage(${1:sender}, ${2:messageType}, ${1:message}, ${2:arguments})${20}"
      },
      {
        "text": "getWhiteList",
        "snippet": "getWhiteList()${1}"
      },
      {
        "text": "getBlackList",
        "snippet": "getBlackList()${1}"
      },
      {
        "text": "removeBlacklistedIp",
        "snippet": "removeBlacklistedIp()${1}"
      },
      {
        "text": "removeWhitelistedName",
        "snippet": "removeWhitelistedName()${1}"
      },
      {
        "text": "getValue",
        "snippet": "getValue(${1:key})${20}"
      },
      {
        "text": "getValues",
        "snippet": "getValues()${1}"
      },
      {
        "text": "setValue",
        "snippet": "setValue(${:key}, ${2: value})${20}"
      }
    ],
    "properties": [
      {
        "text": "difficulty",
        "type": "property"
      },
      {
        "text": "description",
        "type": "property"
      },
      {
        "text": "name",
        "type": "property"
      },
      {
        "text": "seed",
        "type": "property"
      },
      {
        "text": "infiniteResources",
        "type": "property"
      },
      {
        "text": "collisionDamage",
        "type": "property"
      },
      {
        "text": "accessMode",
        "type": "property"
      },
      {
        "text": "sameStartSector",
        "type": "property"
      },
      {
        "text": "playerToPlayerDamage",
        "type": "property"
      }
    ]
  },
  {
    "text": "Galaxy",
    "snippet": "Galaxy()${1}",
    "description": "A new instance of Galaxy",
    "members": [
      {
        "text": "createRandomFaction",
        "snippet": "createRandomFaction(${1:x}, ${2:y})${20}",
        "svc": "Server",
        "description": "Creates a new faction with home sector at the given coordinates. Name, turrets and styles will be generated automatically."
      },
      {
        "text": "createFaction",
        "snippet": "createFaction(${1:name}, ${1:x}, ${2:y})${20}",
        "svc": "Server",
        "description": "Creates a new faction with a specified name and home sector at the given coordinates. Turrets and styles will be generated automatically. If the faction name is already taken, returns the faction with the specified name."
      },
      {
        "text": "getLocalFaction",
        "snippet": "getLocalFaction(${1:x}, ${2:y})${20}",
        "svc": "Server",
        "description": "Does a lookup on the faction map and retrieves the faction controlling the given sector. This may trigger a creation of a faction that does not yet exist."
      },
      {
        "text": "getNearestFaction",
        "snippet": "getNearestFaction(${1:x}, ${2:y})${20}",
        "svc": "Server",
        "description": "Does a lookup on the faction map and retrieves the nearest faction to the given sector. Distance is calculated by the factions' home sector. This may trigger a creation of a faction that does not yet exist."
      },
      {
        "text": "getControllingFaction",
        "snippet": "getControllingFaction(${1:x}, ${2:y})${20}",
        "svc": "Server",
        "description": "Does a lookup on the faction map and retrieves the faction controlling the sector. The faction is determined by the influence of sectors around the sector to check. As sectors are generated while players are exploring, influence over sectors is also only generated while players are exploring. It's very possible that as long as not all sectors near the tested sector have been discovered, the influence is not yet determined nor final."
      },
      {
        "text": "findFaction",
        "snippet": "findFaction(${1:identifier})${20}",
        "svc": "Server",
        "description": "Looks for a faction with the given name or index. This will not trigger the creation of a new faction. Finding players with this method is not possible, since player names can change via Steam."
      },
      {
        "text": "getPirateFaction",
        "svc": "Server",
        "snippet": "getPirateFaction(${1:level})${20}"
      },
      {
        "text": "getPlayerNames",
        "snippet": "getPlayerNames()${1}"
      },
      {
        "text": "getPlayerIndices",
        "snippet": "getPlayerIndices()${1}",
        "svc": "Client"
      },
      {
        "text": "getOnlinePlayerNames",
        "svc": "Server",
        "snippet": "getOnlinePlayerNames()${1}"
      },
      {
        "text": "setFactionRelations",
        "svc": "Server",
        "snippet": "setFactionRelations(${1:factionA}, ${2:factionB}, ${3:level})${20}"
      },
      {
        "text": "changeFactionRelations",
        "svc": "Server",
        "snippet": "changeFactionRelations(${1:factionA}, ${2:factionB}, ${3:delta})${20}"
      },
      {
        "text": "registerCallback",
        "snippet": "registerCallback(${1:callbackName}, ${2:functionName})${20}",
        "svc": "Server",
        "description": "Register a callback in the galaxy. The callback may arrive with a delay."
      },
      {
        "text": "unregisterCallback",
        "svc": "Server",
        "snippet": "unregisterCallback(${1:callbackName}, ${2:functionName})${20}"
      },
      {
        "text": "sectorExists",
        "snippet": "sectorExists(${1:x}, ${2:y})${20}",
        "svc": "Server",
        "description": "Check if a sector exists. This function checks if the sector exists in the database."
      }
    ]
  },
  {
    "text": "Alliance",
    "snippet": "Alliance(${1:var})${20}",
    "description": "A new instance of Alliance",
    "members": [
      {
        "text": "contains",
        "snippet": "contains(${1:int})${20}"
      },
      {
        "text": "getMemberRank",
        "snippet": "getMemberRank(${1:int})${20}"
      },
      {
        "text": "getRank",
        "snippet": "getRank(${1:string})${20}"
      },
      {
        "text": "rankExists",
        "snippet": "rankExists(${1:string})${20}"
      },
      {
        "text": "getMemberLocation",
        "snippet": "getMemberLocation(${1:int})${20}"
      },
      {
        "text": "hasPrivilege",
        "snippet": "hasPrivilege(${1:int}, ${2:int})${20}"
      },
      {
        "text": "addRank",
        "snippet": "addRank(${1:string}, ${2:string})${20}"
      },
      {
        "text": "removeRank",
        "snippet": "removeRank(${1:string})${20}"
      },
      {
        "text": "moveRank",
        "snippet": "moveRank(${1:string}, ${2:string})${20}"
      },
      {
        "text": "setMemberRank",
        "snippet": "setMemberRank(${1:int}, ${2:string})${20}"
      },
      {
        "text": "addRankPrivilege",
        "snippet": "addRankPrivilege(${1:string}, ${2:int})${20}"
      },
      {
        "text": "removeRankPrivilege",
        "snippet": "removeRankPrivilege(${1:string}, ${2:int})${20}"
      },
      {
        "text": "ownsShip",
        "snippet": "ownsShip(${1:string})${20}"
      },
      {
        "text": "getShipNames",
        "snippet": "getShipNames()${1}"
      },
      {
        "text": "getShipCargo",
        "snippet": "getShipCargo(${1:string})${20}"
      },
      {
        "text": "getShipPaymentTime",
        "snippet": "getShipPaymentTime(${1:string})${20}"
      },
      {
        "text": "getShipCrew",
        "svc": "Server",
        "snippet": "getShipCrew(${1:string})${20}"
      },
      {
        "text": "getShipPayment",
        "snippet": "getShipPayment(${1:string})${20}"
      },
      {
        "text": "getShipPlan",
        "snippet": "getShipPlan(${1:string})${20}"
      },
      {
        "text": "getShipPosition",
        "snippet": "getShipPosition(${1:string})${20}"
      },
      {
        "text": "getShipType",
        "svc": "Server",
        "snippet": "getShipType(${1:string})${20}"
      },
      {
        "text": "resolveScriptPath",
        "svc": "Server",
        "snippet": "resolveScriptPath(${1:path})${20}"
      },
      {
        "text": "invokeFunction",
        "svc": "Server",
        "snippet": "invokeFunction(${1:script}, ${1:functionName}, ${1:arguments})${20}"
      },
      {
        "text": "addScript",
        "svc": "Server",
        "snippet": "addScript(${1:scriptPath}, ${2:arguments})${20}"
      },
      {
        "text": "addScriptOnce",
        "svc": "Server",
        "snippet": "addScriptOnce(${1:scriptPath}, ${2:arguments})${20}"
      },
      {
        "text": "removeScript",
        "svc": "Server",
        "snippet": "removeScript(${1:script})${20}"
      },
      {
        "text": "getScripts",
        "svc": "Server",
        "snippet": "getScripts()${1}"
      },
      {
        "text": "hasScript",
        "svc": "Server",
        "snippet": "hasScript(${1:name})${20}"
      },
      {
        "text": "sendChatMessage",
        "svc": "Server",
        "snippet": "sendChatMessage(${1:sender}, ${2:messageType}, ${3:message}, ${4:arguments})${20}"
      },
      {
        "text": "getRelations",
        "snippet": "getRelations(${1:int})${20}"
      },
      {
        "text": "knowsFaction",
        "snippet": "knowsFaction(${1:int})${20}"
      },
      {
        "text": "getHomeSectorCoordinates",
        "snippet": "getHomeSectorCoordinates(${1:int}, ${2:int})${20}"
      },
      {
        "text": "setHomeSectorCoordinates",
        "svc": "Server",
        "snippet": "getHomeSectorCoordinates(${1:int}, ${2:int})${20}"
      },
      {
        "text": "pay",
        "svc": "Server",
        "snippet": "pay(${1:int64_t}, ${2:int64_t...})${20}"
      },
      {
        "text": "payMoney",
        "svc": "Server",
        "snippet": "payMoney(${1:int64_t})${20}"
      },
      {
        "text": "payResource",
        "svc": "Server",
        "snippet": "payResource(${1:material}, ${2:int64_t})${20}"
      },
      {
        "text": "receive",
        "svc": "Server",
        "snippet": "receive(${1:int64_t}, ${2:int64_t...})${20}"
      },
      {
        "text": "receiveMoney",
        "svc": "Server",
        "snippet": "receiveMoney(${1:int64_t})${20}"
      },
      {
        "text": "receiveResource",
        "svc": "Server",
        "snippet": "receiveResource(${1:material}, ${2:int64_t})${20}"
      },
      {
        "text": "canPay",
        "snippet": "canPay(${1:int64_t}, ${2:int64_t...})${20}"
      },
      {
        "text": "canPayMoney",
        "svc": "Server",
        "snippet": "canPayMoney(${1:int64_t})${20}"
      },
      {
        "text": "canPayResource",
        "svc": "Server",
        "snippet": "canPayResource(${1:material}, ${2:int64_t})${20}"
      },
      {
        "text": "setResources",
        "svc": "Server",
        "snippet": "setResources(${1:int64_t...})${20}"
      },
      {
        "text": "getResources",
        "snippet": "getResources()${1}"
      },
      {
        "text": "getInventory",
        "snippet": "getInventory()${1}"
      },
      {
        "text": "getLanguage",
        "svc": "Server",
        "snippet": "getLanguage()${1}"
      },
      {
        "text": "getShipStyle",
        "snippet": "getShipStyle(${1:dtring})${20}"
      },
      {
        "text": "getStationStyle",
        "snippet": "getStationStyle(${1:string})${20}"
      },
      {
        "text": "getShipStyleNames",
        "snippet": "getShipStyleNames()${1}"
      },
      {
        "text": "getStationStyleNames",
        "snippet": "getStationStyleNames()${1}"
      },
      {
        "text": "createShipStyle",
        "svc": "Server",
        "snippet": "createShipStyle(${1:string})${20}"
      },
      {
        "text": "createStationStyle",
        "svc": "Server",
        "snippet": "createStationStyle(${1:string})${20}"
      },
      {
        "text": "setStaticRelationsToFaction",
        "svc": "Server",
        "snippet": "setStaticRelationsToFaction(${1:int}, ${2:bool})${20}"
      },
      {
        "text": "hasStaticRelationsToFaction",
        "svc": "Server",
        "snippet": "hasStaticRelationsToFaction(${1:int})${20}"
      },
      {
        "text": "getValue",
        "snippet": "getValue(${1:key})${20}",
        "svc": "Server",
        "description": "Retrieves a custom value saved in the entity with the given"
      },
      {
        "text": "getValues",
        "snippet": "getValues()${1}",
        "svc": "Server",
        "description": "Retrieves all key-value pairs of custom values"
      },
      {
        "text": "setValue",
        "snippet": "setValue(${1:key}, ${2:value})${20}",
        "svc": "Server",
        "description": "Sets a custom value"
      },
      {
        "text": "setTrait",
        "snippet": "setTrait(${1:trait}, ${2:value})${20}",
        "svc": "Server",
        "description": "Sets a trait value associated with a key"
      },
      {
        "text": "getTrait",
        "snippet": "getTrait(${1:trait})${20}",
        "svc": "Server",
        "description": "Retrieves a trait value associated with a key"
      },
      {
        "text": "getTraits",
        "snippet": "getTraits()${1}",
        "svc": "Server",
        "description": "Retrieves all key-value trait pairs of the faction"
      }
    ],
    "properties": [
      {
        "text": "numShips",
        "type": "property"
      },
      {
        "text": "leader",
        "svc": "Server",
        "type": "property"
      },
      {
        "text": "newMemberRank",
        "svc": "Server",
        "type": "property"
      },
      {
        "text": "money",
        "type": "property"
      },
      {
        "text": "name",
        "type": "property"
      },
      {
        "text": "index",
        "type": "property"
      },
      {
        "text": "isPlayer",
        "svc": "Server",
        "type": "property"
      },
      {
        "text": "isAlliance",
        "svc": "Server",
        "type": "property"
      },
      {
        "text": "isAIFaction",
        "svc": "Server",
        "type": "property"
      },
      {
        "text": "color1",
        "svc": "Server",
        "type": "property"
      },
      {
        "text": "color2",
        "svc": "Server",
        "type": "property"
      },
      {
        "text": "color3",
        "svc": "Server",
        "type": "property"
      },
      {
        "text": "initialRelations",
        "svc": "Server",
        "type": "property"
      },
      {
        "text": "initialRelationsToPlayer",
        "svc": "Server",
        "type": "property"
      },
      {
        "text": "infiniteResources",
        "type": "property"
      },
      {
        "text": "staticRelationsToPlayers",
        "svc": "Server",
        "type": "property"
      },
      {
        "text": "staticRelationsToAI",
        "svc": "Server",
        "type": "property"
      },
      {
        "text": "staticRelationsToAll",
        "svc": "Server",
        "type": "property"
      }
    ]
  },
  {
    "text": "Faction",
    "snippet": "Faction()${1}",
    "description": "A new instance of Faction",
    "members": [
      {
        "text": "getRelations",
        "snippet": "getRelations(${1:int})${20}"
      },
      {
        "text": "knowsFaction",
        "snippet": "knowsFaction(${1:int})${20}",
        "svc": "Server"
      },
      {
        "text": "getHomeSectorCoordinates",
        "snippet": "getHomeSectorCoordinates(${1:int}, ${2:int})${20}"
      },
      {
        "text": "setHomeSectorCoordinates",
        "snippet": "getHomeSectorCoordinates(${1:int}, ${2:int})${20}",
        "svc": "Server"
      },
      {
        "text": "pay",
        "snippet": "pay(${1:int64_t}, ${2:int64_t...})${20}",
        "svc": "Server"
      },
      {
        "text": "payMoney",
        "snippet": "payMoney(${1:int64_t})${20}",
        "svc": "Server"
      },
      {
        "text": "payResource",
        "snippet": "payResource(${1:material}, ${2:int64_t})${20}",
        "svc": "Server"
      },
      {
        "text": "receive",
        "snippet": "receive(${1:int64_t}, ${2:int64_t...})${20}",
        "svc": "Server"
      },
      {
        "text": "receiveMoney",
        "snippet": "receiveMoney(${1:int64_t})${20}",
        "svc": "Server"
      },
      {
        "text": "receiveResource",
        "snippet": "receiveResource(${1:material}, ${2:int64_t})${20}",
        "svc": "Server"
      },
      {
        "text": "canPay",
        "snippet": "canPay(${1:int64_t}, ${2:int64_t...})${20}",
        "svc": "Server"
      },
      {
        "text": "canPayMoney",
        "snippet": "canPayMoney(${1:int64_t})${20}",
        "svc": "Server"
      },
      {
        "text": "canPayResource",
        "snippet": "canPayResource(${1:material}, ${2:int64_t})${20}",
        "svc": "Server"
      },
      {
        "text": "setResources",
        "snippet": "setResources(${1:int64_t...})${20}",
        "svc": "Server"
      },
      {
        "text": "getResources",
        "snippet": "getResources()${1}",
        "svc": "Server"
      },
      {
        "text": "getInventory",
        "snippet": "getInventory()${1}",
        "svc": "Server"
      },
      {
        "text": "getLanguage",
        "snippet": "getLanguage()${1}",
        "svc": "Server"
      },
      {
        "text": "getShipStyle",
        "snippet": "getShipStyle(${1:dtring})${20}",
        "svc": "Server"
      },
      {
        "text": "getStationStyle",
        "snippet": "getStationStyle(${1:string})${20}",
        "svc": "Server"
      },
      {
        "text": "getShipStyleNames",
        "snippet": "getShipStyleNames()${1}",
        "svc": "Server"
      },
      {
        "text": "getStationStyleNames",
        "snippet": "getStationStyleNames()${1}",
        "svc": "Server"
      },
      {
        "text": "createShipStyle",
        "snippet": "createShipStyle(${1:string})${20}",
        "svc": "Server"
      },
      {
        "text": "createStationStyle",
        "snippet": "createStationStyle(${1:string})${20}",
        "svc": "Server"
      },
      {
        "text": "setStaticRelationsToFaction",
        "snippet": "setStaticRelationsToFaction(${1:int}, ${2:bool})${20}",
        "svc": "Server"
      },
      {
        "text": "hasStaticRelationsToFaction",
        "snippet": "hasStaticRelationsToFaction(${1:int})${20}",
        "svc": "Server"
      },
      {
        "text": "getValue",
        "snippet": "getValue(${1:key})${20}",
        "description": "Retrieves a custom value saved in the entity with the given",
        "svc": "Server"
      },
      {
        "text": "getValues",
        "snippet": "getValues()${1}",
        "description": "Retrieves all key-value pairs of custom values",
        "svc": "Server"
      },
      {
        "text": "setValue",
        "snippet": "setValue(${1:key}, ${2:value})${20}",
        "description": "Sets a custom value",
        "svc": "Server"
      },
      {
        "text": "setTrait",
        "snippet": "setTrait(${1:trait}, ${2:value})${20}",
        "description": "Sets a trait value associated with a key",
        "svc": "Server"
      },
      {
        "text": "getTrait",
        "snippet": "getTrait(${1:trait})${20}",
        "description": "Retrieves a trait value associated with a key"
      },
      {
        "text": "getTraits",
        "snippet": "getTraits()${1}",
        "description": "Retrieves all key-value trait pairs of the faction"
      }
    ],
    "properties": [
      {
        "text": "money",
        "type": "property",
        "svc": "Server"
      },
      {
        "text": "name",
        "type": "property"
      },
      {
        "text": "index",
        "type": "property"
      },
      {
        "text": "isPlayer",
        "type": "property"
      },
      {
        "text": "isAlliance",
        "type": "property"
      },
      {
        "text": "isAIFaction",
        "type": "property"
      },
      {
        "text": "color1",
        "type": "property",
        "svc": "Server"
      },
      {
        "text": "color2",
        "type": "property",
        "svc": "Server"
      },
      {
        "text": "color3",
        "type": "property",
        "svc": "Server"
      },
      {
        "text": "initialRelations",
        "type": "property",
        "svc": "Server"
      },
      {
        "text": "initialRelationsToPlayer",
        "type": "property",
        "svc": "Server"
      },
      {
        "text": "infiniteResources",
        "type": "property",
        "svc": "Server"
      },
      {
        "text": "staticRelationsToPlayers",
        "type": "property",
        "svc": "Server"
      },
      {
        "text": "staticRelationsToAI",
        "type": "property",
        "svc": "Server"
      },
      {
        "text": "staticRelationsToAll",
        "type": "property",
        "svc": "Server"
      },
      {
        "text": "translatedName",
        "type": "property",
        "svc": "Server"
      }
    ]
  },
  {
    "text": "Line",
    "snippet": "Line(${1:index})${20}",
    "svc": "Client",
    "description": "A new instance of Line",
    "inherited": "UIElement",
    "properties": [
      {
        "text": "color",
        "type": "property"
      }
    ]
  },
  {
    "text": "UIOrganizer",
    "snippet": "UIOrganizer(${1:a}, ${2:b})${3}",
    "svc": "Client",
    "description": "Expects either a Rect specifying the rect of this UI organizer for parameter a and nil for b, or a vec2 for a and a vec2 for b, specifying the lower and upper bounds for the UI organizer rect.",
    "inherited": "UIRect"
  },
  {
    "text": "UIVerticalLister",
    "snippet": "UIVerticalLister(${1:rect}, ${2:padding}, ${1:margin})${20}",
    "svc": "Client",
    "description": "This class gets a rect and aligns given elements in a list style inside the rect.",
    "inherited": "UIRect",
    "members": [
      {
        "text": "placeCenter",
        "snippet": "placeCenter(${1:vec})${20}",
        "description": "Uses the given vector to create a Rect of size Rect(0, 0, vec.x, vec.y), places it in the list and centers it"
      },
      {
        "text": "placeLeft",
        "snippet": "placeLeft(${1:vec})${20}",
        "description": "Uses the given vector to create a Rect of size Rect(0, 0, vec.x, vec.y), places it in the list and aligns it to the left"
      },
      {
        "text": "placeRight",
        "snippet": "placeRight(${1:vec})${20}",
        "description": "Uses the given vector to create a Rect of size Rect(0, 0, vec.x, vec.y), places it in the list and aligns it to the right"
      },
      {
        "text": "hasEnoughSpace",
        "snippet": "hasEnoughSpace(${1:vec})${20}",
        "description": "Checks if there is enough space to fit a rect with the given height into the lister's remaining rect"
      },
      {
        "text": "nextRect",
        "snippet": "nextRect(${1:height})${20}",
        "description": "Returns the next rect of a certain height that would be created. The rect will have the full width of the rect given to the lister."
      }
    ]
  },
  {
    "text": "UIHorizontalSplitter",
    "snippet": "UIHorizontalSplitter(${1:rect}, ${2:padding}, ${1:margin}, ${1:ratio})${20}",
    "svc": "Client",
    "description": "This class gets a rect and creates two new rects by splitting the given rect horizontally.",
    "inherited": "UIRect",
    "members": [
      {
        "text": "setTopQuadratic",
        "snippet": "setTopQuadratic()${1}",
        "description": "Set the top side to have a quadratic size, if possible"
      },
      {
        "text": "setBottomQuadratic",
        "snippet": "setBottomQuadratic()${1}",
        "description": "Set the bottom side to have a quadratic size, if possible"
      }
    ],
    "properties": [
      {
        "text": "topSize",
        "type": "property"
      },
      {
        "text": "bottomSize",
        "type": "property"
      },
      {
        "text": "top",
        "type": "property"
      },
      {
        "text": "bottom",
        "type": "property"
      },
      {
        "text": "paddingInside",
        "type": "property"
      },
      {
        "text": "ratio",
        "type": "property"
      }
    ]
  },
  {
    "text": "UIVerticalSplitter",
    "snippet": "UIVerticalSplitter(${1:rect}, ${2:padding}, ${1:margin}, ${1:ratio})${20}",
    "svc": "Client",
    "description": "This class gets a rect and creates two new rects by splitting the given rect vertically.",
    "inherited": "UIRect",
    "members": [
      {
        "text": "setLeftQuadratic",
        "snippet": "setLeftQuadratic()${1}",
        "description": "Set the left side to have a quadratic size, if possible"
      },
      {
        "text": "setRightQuadratic",
        "snippet": "setRightQuadratic()${1}",
        "description": "Set the right side to have a quadratic size, if possible"
      }
    ],
    "properties": [
      {
        "text": "leftSize",
        "type": "property"
      },
      {
        "text": "rightSize",
        "type": "property"
      },
      {
        "text": "left",
        "type": "property"
      },
      {
        "text": "right",
        "type": "property"
      },
      {
        "text": "paddingInside",
        "type": "property"
      },
      {
        "text": "ratio",
        "type": "property"
      }
    ]
  },
  {
    "text": "UIHorizontalMultiSplitter",
    "snippet": "UIHorizontalMultiSplitter(${1:rect}, ${2:padding}, ${1:margin}, ${1:splits})${20}",
    "svc": "Client",
    "description": "This class gets a rect and creates multiple new rects by evenly splitting the given rect horizontally n times, creating n + 1 new rects.",
    "inherited": "UIRect",
    "members": [
      {
        "text": "partition",
        "snippet": "partition(${1:index})${20}",
        "description": "Retrieves one of the new created rects"
      }
    ],
    "properties": [
      {
        "text": "top",
        "type": "property"
      },
      {
        "text": "bottom",
        "type": "property"
      },
      {
        "text": "paddingInside",
        "type": "property"
      }
    ]
  },
  {
    "text": "UIVerticalMultiSplitter",
    "snippet": "UIVerticalMultiSplitter(${1:rect}, ${2:padding}, ${1:margin}, ${1:splits})${20}",
    "svc": "Client",
    "description": "This class gets a rect and creates multiple new rects by evenly splitting the given rect vertically n times, creating n + 1 new rects.",
    "inherited": "UIRect",
    "members": [
      {
        "text": "partition",
        "snippet": "partition(${1:index})${20}",
        "description": "Retrieves one of the new created rects"
      }
    ],
    "properties": [
      {
        "text": "left",
        "type": "property"
      },
      {
        "text": "right",
        "type": "property"
      },
      {
        "text": "paddingInside",
        "type": "property"
      }
    ]
  },
  {
    "text": "UIArbitraryVerticalSplitter",
    "snippet": "UIArbitraryVerticalSplitter(${1:rect}, ${2:padding}, ${1:margin}, ${1:splits})${20}",
    "svc": "Client",
    "description": "This class gets a rect and creates multiple new rects by arbitrarily splitting the given rect vertically n times, creating n + 1 new rects.",
    "inherited": "UIRect",
    "members": [
      {
        "text": "partition",
        "snippet": "partition(${1:index})${20}",
        "description": "Retrieves one of the new created rects"
      }
    ],
    "properties": [
      {
        "text": "paddingInside",
        "type": "property"
      }
    ]
  },
  {
    "text": "Tab",
    "snippet": "Tab(${1:index})${20}",
    "svc": "Client",
    "description": "A new instance of Tab",
    "inherited": [
      "UIContainer",
      "UIElement"
    ],
    "properties": [
      {
        "text": "icon",
        "type": "property"
      },
      {
        "text": "description",
        "type": "property"
      },
      {
        "text": "name",
        "type": "property"
      }
    ]
  },
  {
    "text": "TabbedWindow",
    "snippet": "TabbedWindow(${1:index})${20}",
    "svc": "Client",
    "description": "A new instance of TabbedWindow",
    "inherited": [
      "UIContainer",
      "UIElement"
    ],
    "members": [
      {
        "text": "selectTab",
        "snippet": "selectTab(${1:tab})${20}"
      },
      {
        "text": "deactivateTab",
        "snippet": "deactivateTab(${1:tab})${20}"
      },
      {
        "text": "activateTab",
        "snippet": "activateTab(${1:tab})${20}"
      },
      {
        "text": "activateAllTabs",
        "snippet": "activateAllTabs()${1}"
      },
      {
        "text": "createTab",
        "snippet": "createTab(${1:name}, ${2:icon}, ${3:description})${20}"
      },
      {
        "text": "getTab",
        "snippet": "getTab(${1:name})${20}"
      },
      {
        "text": "getActiveTab",
        "snippet": "getActiveTab()${1}"
      }
    ],
    "properties": [
      {
        "text": "onSelectedFunction",
        "type": "property"
      }
    ]
  },
  {
    "text": "StatisticsBar",
    "snippet": "StatisticsBar(${1:index})${20}",
    "svc": "Client",
    "description": "A new instance of StatisticsBar",
    "inherited": "UIElement",
    "members": [
      {
        "text": "setRange",
        "snippet": "setRange(${1:minRange}, ${1:maxRange})${20}"
      },
      {
        "text": "setValue",
        "snippet": "setValue(${1:value}, ${1:name}, ${1:color})${20}"
      }
    ],
    "properties": [
      {
        "text": "value",
        "type": "property"
      },
      {
        "text": "name",
        "type": "property"
      },
      {
        "text": "color",
        "type": "property"
      }
    ]
  },
  {
    "text": "ComboBox",
    "snippet": "ComboBox(${1:index})${20}",
    "svc": "Client",
    "description": "A new instance of ComboBox",
    "inherited": "UIElement",
    "members": [
      {
        "text": "clear",
        "snippet": "clear()${1}"
      },
      {
        "text": "addEntry",
        "snippet": "addEntry(${1:entry})${20}"
      },
      {
        "text": "setSelectedIndexNoCallback",
        "snippet": "setSelectedIndexNoCallback(${1:int})${20}"
      },
      {
        "text": "getEntry",
        "snippet": "getEntry(${1:index})${20}"
      }
    ],
    "properties": [
      {
        "text": "selectedIndex",
        "type": "property"
      },
      {
        "text": "selectedEntry",
        "type": "property"
      },
      {
        "text": "onSelectedFunction",
        "type": "property"
      }
    ]
  },
  {
    "text": "MultiLineTextBox",
    "snippet": "MultiLineTextBox(${1:index})${20}",
    "svc": "Client",
    "description": "A new instance of MultiLineTextBox",
    "inherited": "UIElement",
    "members": [
      {
        "text": "clear",
        "snippet": "clear()${1}"
      },
      {
        "text": "moveCursorLeft",
        "snippet": "moveCursorLeft()${1}"
      },
      {
        "text": "moveCursorRight",
        "snippet": "moveCursorRight()${1}"
      },
      {
        "text": "moveCursorLeftCtrl",
        "snippet": "moveCursorLeftCtrl()${1}"
      },
      {
        "text": "moveCursorRightCtrl",
        "snippet": "moveCursorRightCtrl()${1}"
      },
      {
        "text": "moveCursorUp",
        "snippet": "moveCursorUp()${1}"
      },
      {
        "text": "moveCursorDown",
        "snippet": "moveCursorDown()${1}"
      }
    ],
    "properties": [
      {
        "text": "text",
        "type": "property"
      },
      {
        "text": "active",
        "type": "property"
      },
      {
        "text": "editable",
        "type": "property"
      },
      {
        "text": "setFontSize",
        "type": "property"
      },
      {
        "text": "isTypingActive",
        "type": "property"
      }
    ]
  },
  {
    "text": "InventorySelection",
    "snippet": "InventorySelection(${1:index})${20}",
    "svc": "Client",
    "description": "A new instance of InventorySelection",
    "inherited": [
      "UIElement",
      "UIContainer"
    ],
    "members": [
      {
        "text": "fill",
        "snippet": "fill(${1:factionIndex}, ${2:types...})${20}"
      },
      {
        "text": "update",
        "snippet": "update(${1:factionIndex}, ${2:index})${20}"
      },
      {
        "text": "clear",
        "snippet": "clear()${1}"
      },
      {
        "text": "add",
        "snippet": "add(${1:item}, ${2:pos})${20}"
      },
      {
        "text": "addEmpty",
        "snippet": "addEmpty(${1:pos})${20}"
      },
      {
        "text": "remove",
        "snippet": "remove(${1:pos})${20}"
      },
      {
        "text": "select",
        "snippet": "select(${1:pos})${20}"
      },
      {
        "text": "selectNoCallback",
        "snippet": "selectNoCallback(${1:pos})${20}"
      },
      {
        "text": "unselect",
        "snippet": "unselect()${1}"
      },
      {
        "text": "getKey",
        "snippet": "getKey(${1:mouse})${20}"
      },
      {
        "text": "getItem",
        "snippet": "getItem(${1:key})${20}"
      },
      {
        "text": "getRect",
        "snippet": "getRect(${1:x}, ${2:y})${20}"
      },
      {
        "text": "getItems",
        "snippet": "getItems()${1}"
      }
    ],
    "properties": [
      {
        "text": "borderMode",
        "type": "property"
      },
      {
        "text": "sortMode",
        "type": "property"
      },
      {
        "text": "selected",
        "type": "property"
      },
      {
        "text": "selectedKey",
        "type": "property"
      },
      {
        "text": "maxHorizontalEntries",
        "type": "property"
      },
      {
        "text": "isRenderingDraggedItem",
        "type": "property"
      },
      {
        "text": "numEntries",
        "type": "property"
      },
      {
        "text": "entriesSelectable",
        "type": "property"
      },
      {
        "text": "showEntriesOnly",
        "type": "property"
      },
      {
        "text": "dropIntoSelfEnabled",
        "type": "property"
      },
      {
        "text": "dropIntoEnabled",
        "type": "property"
      },
      {
        "text": "dragFromEnabled",
        "type": "property"
      },
      {
        "text": "padding",
        "type": "property"
      },
      {
        "text": "onInsertedFunction",
        "type": "property"
      },
      {
        "text": "onSelectedFunction",
        "type": "property"
      },
      {
        "text": "onDeselectedFunction",
        "type": "property"
      },
      {
        "text": "onClickedFunction",
        "type": "property"
      },
      {
        "text": "onDroppedFunction",
        "type": "property"
      },
      {
        "text": "onReceivedFunction",
        "type": "property"
      }
    ]
  },
  {
    "text": "UIElement",
    "snippet": "UIElement()${1}",
    "svc": "Client",
    "description": "A new instance of UIElement",
    "inherited": "UIElement"
  },
  {
    "text": "PlanDisplayer",
    "snippet": "PlanDisplayer(${1:index})${20}",
    "svc": "Client",
    "description": "A new instance of PlanDisplayer",
    "inherited": "UIElement",
    "members": [
      {
        "text": "setPlans",
        "snippet": "setPlans(${1:broken}, ${2:intect})${20}"
      }
    ],
    "properties": [
      {
        "text": "plan",
        "type": "property"
      },
      {
        "text": "viewDir",
        "type": "property"
      },
      {
        "text": "center",
        "type": "property"
      },
      {
        "text": "autoCenter",
        "type": "property"
      },
      {
        "text": "showStats",
        "type": "property"
      },
      {
        "text": "zoomable",
        "type": "property"
      },
      {
        "text": "zoom",
        "type": "property"
      }
    ]
  },
  {
    "text": "ListBoxEx",
    "snippet": "ListBoxEx(${1:index})${20}",
    "svc": "Client",
    "description": "A new instance of ListBoxEx",
    "inherited": "UIElement",
    "members": [
      {
        "text": "addRow",
        "snippet": "addRow(${1:strings})${20}"
      },
      {
        "text": "removeRow",
        "snippet": "removeRow(${1:index})${20}"
      },
      {
        "text": "clear",
        "snippet": "clear()${1}"
      },
      {
        "text": "deselect",
        "snippet": "deselect()${1}"
      },
      {
        "text": "select",
        "snippet": "select(${1:index})${20}"
      },
      {
        "text": "setEntry",
        "snippet": "setEntry(${1:column}, ${2:row}, ${3:text}, ${4:bold}, ${5:italic}, ${6:color})${20}"
      },
      {
        "text": "setColumnWidth",
        "snippet": "setColumnWidth(${1:index}, ${2:width})${20}"
      },
      {
        "text": "getEntry",
        "snippet": "getEntry(${1:column}, ${2:row})${20}"
      },
      {
        "text": "getColumnWidth",
        "snippet": "getColumnWidth(${1:index})${20}"
      }
    ],
    "properties": [
      {
        "text": "selected",
        "type": "property"
      },
      {
        "text": "size",
        "type": "property"
      },
      {
        "text": "rows",
        "type": "property"
      },
      {
        "text": "empty",
        "type": "property"
      },
      {
        "text": "headline",
        "type": "property"
      },
      {
        "text": "columns",
        "type": "property"
      },
      {
        "text": "fontSize",
        "type": "property"
      },
      {
        "text": "rowHeight",
        "type": "property"
      },
      {
        "text": "font",
        "type": "property"
      },
      {
        "text": "onSelectFunction",
        "type": "property"
      },
      {
        "text": "onAddedFunction",
        "type": "property"
      },
      {
        "text": "onRemoveFunction",
        "type": "property"
      },
      {
        "text": "onChangedFunction",
        "type": "property"
      },
      {
        "text": "onClearFunction",
        "type": "property"
      }
    ]
  },
  {
    "text": "ListBox",
    "snippet": "ListBox(${1:index})${20}",
    "svc": "Client",
    "description": "A new instance of ListBox",
    "inherited": "UIElement",
    "members": [
      {
        "text": "addEntry",
        "snippet": "addEntry(${1:str})${20}"
      },
      {
        "text": "removeEntry",
        "snippet": "removeEntry(${1:index})${20}"
      },
      {
        "text": "clear",
        "snippet": "clear()${1}"
      },
      {
        "text": "deselect",
        "snippet": "deselect()${1}"
      },
      {
        "text": "select",
        "snippet": "select(${1:index})${20}"
      },
      {
        "text": "setEntry",
        "snippet": "setEntry(${1:row}, ${2:text}, ${3:bold}, ${4:italic}, ${5:color})${20}"
      },
      {
        "text": "getEntry",
        "snippet": "getEntry(${2:row})${20}"
      },
      {
        "text": "getSelectedEntry",
        "snippet": "getSelectedEntry()${1}"
      }
    ],
    "properties": [
      {
        "text": "selected",
        "type": "property"
      },
      {
        "text": "size",
        "type": "property"
      },
      {
        "text": "rows",
        "type": "property"
      },
      {
        "text": "empty",
        "type": "property"
      },
      {
        "text": "headline",
        "type": "property"
      },
      {
        "text": "fontSize",
        "type": "property"
      },
      {
        "text": "rowHeight",
        "type": "property"
      },
      {
        "text": "font",
        "type": "property"
      },
      {
        "text": "onSelectFunction",
        "type": "property"
      },
      {
        "text": "onAddedFunction",
        "type": "property"
      },
      {
        "text": "onRemoveFunction",
        "type": "property"
      },
      {
        "text": "onChangedFunction",
        "type": "property"
      },
      {
        "text": "onClearFunction",
        "type": "property"
      }
    ]
  },
  {
    "text": "Window",
    "snippet": "Window(${1:index})${20}",
    "svc": "Client",
    "description": "A new instance of Window",
    "inherited": [
      "UIElement",
      "UIContainer"
    ],
    "properties": [
      {
        "text": "caption",
        "type": "property"
      },
      {
        "text": "showCloseButton",
        "type": "property"
      },
      {
        "text": "moveable",
        "type": "property"
      },
      {
        "text": "clickThrough",
        "type": "property"
      },
      {
        "text": "closeableWithEscape",
        "type": "property"
      }
    ]
  },
  {
    "text": "ScrollFrame",
    "snippet": "ScrollFrame(${1:index})${20}",
    "svc": "Client",
    "description": "A new instance of ScrollFrame",
    "inherited": [
      "UIElement",
      "UIContainer"
    ],
    "members": [
      {
        "text": "scroll",
        "snippet": "scroll(${1:numSteps})${20}"
      }
    ],
    "properties": [
      {
        "text": "scrollSpeed",
        "type": "property"
      },
      {
        "text": "paddingTop",
        "type": "property"
      },
      {
        "text": "paddingBottom",
        "type": "property"
      }
    ]
  },
  {
    "text": "InventorySelectionItem",
    "snippet": "InventorySelectionItem()${1}",
    "svc": "Client",
    "description": "A new instance of InventorySelectionItem",
    "properties": [
      {
        "text": "item",
        "type": "property"
      },
      {
        "text": "deleteable",
        "type": "property"
      },
      {
        "text": "readyForDeletion",
        "type": "property"
      },
      {
        "text": "highlighted",
        "type": "property"
      },
      {
        "text": "amount",
        "type": "property"
      },
      {
        "text": "uvalue",
        "type": "property"
      },
      {
        "text": "border",
        "type": "property"
      }
    ]
  },
  {
    "text": "Slider",
    "snippet": "Slider(${1:index})${20}",
    "svc": "Client",
    "description": "A new instance of Slider",
    "inherited": "UIElement",
    "members": [
      {
        "text": "setRatio",
        "snippet": "setRatio(${1:inFrom}, ${2:inTo})${20}"
      }
    ],
    "properties": [
      {
        "text": "value",
        "type": "property"
      },
      {
        "text": "sliderPosition",
        "type": "property"
      },
      {
        "text": "max",
        "type": "property"
      },
      {
        "text": "min",
        "type": "property"
      },
      {
        "text": "segments",
        "type": "property"
      },
      {
        "text": "caption",
        "type": "property"
      },
      {
        "text": "description",
        "type": "property"
      },
      {
        "text": "unit",
        "type": "property"
      },
      {
        "text": "showValue",
        "type": "property"
      },
      {
        "text": "showCaption",
        "type": "property"
      },
      {
        "text": "showDescription",
        "type": "property"
      },
      {
        "text": "onChangedFunction",
        "type": "property"
      }
    ]
  },
  {
    "text": "TooltipRenderer",
    "snippet": "TooltipRenderer()${1}",
    "svc": "Client",
    "description": "A new instance of TooltipRenderer",
    "members": [
      {
        "text": "draw",
        "snippet": "draw(${1:vec2})${20}"
      },
      {
        "text": "drawMouseTooltip",
        "snippet": "drawMouseTooltip(${1:vec2})${20}"
      }
    ]
  },
  {
    "text": "InputWindow",
    "snippet": "InputWindow(${1:index})${20}",
    "svc": "Client",
    "description": "A new instance of InputWindow",
    "inherited": [
      "UIElement",
      "UIContainer"
    ],
    "members": [
      {
        "text": "show",
        "snippet": "show(${1:caption})${20}"
      }
    ],
    "properties": [
      {
        "text": "onOKFunction",
        "type": "property"
      },
      {
        "text": "onCancelFunction",
        "type": "property"
      },
      {
        "text": "text",
        "type": "property"
      },
      {
        "text": "textBox",
        "type": "property"
      },
      {
        "text": "label",
        "type": "property"
      },
      {
        "text": "okButton",
        "type": "property"
      },
      {
        "text": "cancelButton",
        "type": "property"
      },
      {
        "text": "caption",
        "type": "property"
      },
      {
        "text": "showCloseButton",
        "type": "property"
      },
      {
        "text": "moveable",
        "type": "property"
      },
      {
        "text": "clickThrough",
        "type": "property"
      },
      {
        "text": "closeableWithEscape",
        "type": "property"
      }
    ]
  },
  {
    "text": "Frame",
    "snippet": "Frame(${1:index})${20}",
    "svc": "Client",
    "description": "A new instance of Frame",
    "inherited": "UIElement",
    "properties": [
      {
        "text": "backgroundColor",
        "type": "property"
      }
    ]
  },
  {
    "text": "TextBox",
    "snippet": "TextBox(${1:index})${20}",
    "svc": "Client",
    "description": "A new instance of TextBox",
    "inherited": "UIElement",
    "members": [
      {
        "text": "clear",
        "snippet": "clear(${1:x})${20}"
      },
      {
        "text": "moveCursorLeft",
        "snippet": "moveCursorLeft(${1:x})${20}"
      },
      {
        "text": "moveCursorRight",
        "snippet": "moveCursorRight(${1:x})${20}"
      },
      {
        "text": "moveCursorLeftCtrl",
        "snippet": "moveCursorLeftCtrl(${1:x})${20}"
      },
      {
        "text": "moveCursorRightCtrl",
        "snippet": "moveCursorRightCtrl(${1:x})${20}"
      },
      {
        "text": "forbidInvalidFilenameChars",
        "snippet": "forbidInvalidFilenameChars(${1:x})${20}"
      }
    ],
    "properties": [
      {
        "text": "text",
        "type": "property"
      },
      {
        "text": "active",
        "type": "property"
      },
      {
        "text": "onTextChangedFunction",
        "type": "property"
      },
      {
        "text": "cursor",
        "type": "property"
      },
      {
        "text": "editable",
        "type": "property"
      },
      {
        "text": "maxCharacters",
        "type": "property"
      },
      {
        "text": "allowedCharacters",
        "type": "property"
      },
      {
        "text": "forbiddenCharacters",
        "type": "property"
      },
      {
        "text": "clearOnClick",
        "type": "property"
      },
      {
        "text": "tabTarget",
        "type": "property"
      },
      {
        "text": "backgroundText",
        "type": "property"
      },
      {
        "text": "isTypingActive",
        "type": "property"
      }
    ]
  },
  {
    "text": "PlanSelectionItem",
    "snippet": "PlanSelectionItem()${1}",
    "svc": "Client",
    "description": "A new instance of PlanSelectionItem",
    "members": [
      {
        "text": "refreshTexture",
        "snippet": "refreshTexture()${1}"
      }
    ],
    "properties": [
      {
        "text": "path",
        "type": "property"
      },
      {
        "text": "plan",
        "type": "property"
      },
      {
        "text": "loaded",
        "type": "property"
      },
      {
        "text": "workshopUrl",
        "type": "property"
      },
      {
        "text": "hasWorkshopIcon",
        "type": "property"
      },
      {
        "text": "isSubscribedPlan",
        "type": "property"
      },
      {
        "text": "isLocalProject",
        "type": "property"
      },
      {
        "text": "isOwnSubmission",
        "type": "property"
      },
      {
        "text": "deleteable",
        "type": "property"
      },
      {
        "text": "readyForDeletion",
        "type": "property"
      },
      {
        "text": "highlighted",
        "type": "property"
      }
    ]
  },
  {
    "text": "SelectionItem",
    "snippet": "SelectionItem()${1}",
    "svc": "Client",
    "description": "A new instance of SelectionItem",
    "properties": [
      {
        "text": "texture",
        "type": "property"
      },
      {
        "text": "amount",
        "type": "property"
      },
      {
        "text": "borderColor",
        "type": "property"
      },
      {
        "text": "color",
        "type": "property"
      },
      {
        "text": "highlightStrength",
        "type": "property"
      },
      {
        "text": "value0",
        "type": "property"
      },
      {
        "text": "value1",
        "type": "property"
      },
      {
        "text": "value2",
        "type": "property"
      },
      {
        "text": "value3",
        "type": "property"
      },
      {
        "text": "value4",
        "type": "property"
      },
      {
        "text": "value5",
        "type": "property"
      },
      {
        "text": "value6",
        "type": "property"
      },
      {
        "text": "value7",
        "type": "property"
      },
      {
        "text": "value8",
        "type": "property"
      },
      {
        "text": "value9",
        "type": "property"
      }
    ]
  },
  {
    "text": "Selection",
    "snippet": "Selection(${1:index})${20}",
    "svc": "Client",
    "description": "A new instance of Selection",
    "inherited": "UIElement",
    "members": [
      {
        "text": "add",
        "snippet": "add(${1:item}, ${2:pos})${20}"
      },
      {
        "text": "addEmpty",
        "snippet": "addEmpty(${1:pos})${20}"
      },
      {
        "text": "clear",
        "snippet": "clear()${1}"
      },
      {
        "text": "remove",
        "snippet": "remove(${1key})${20}"
      },
      {
        "text": "select",
        "snippet": "select(${1:pos})${20}"
      },
      {
        "text": "selectNoCallback",
        "snippet": "selectNoCallback(${1:pos})${20}"
      },
      {
        "text": "unselect",
        "snippet": "unselect()${1}"
      },
      {
        "text": "getKey",
        "snippet": "getKey(${1:mouse})${20}"
      },
      {
        "text": "getItem",
        "snippet": "getItem(${1:key})${20}"
      },
      {
        "text": "getRect",
        "snippet": "getRect(${1:x}, ${2:y})${20}"
      },
      {
        "text": "getItems",
        "snippet": "getItems()${1}"
      }
    ],
    "properties": [
      {
        "text": "selected",
        "type": "property"
      },
      {
        "text": "selectedKey",
        "type": "property"
      },
      {
        "text": "maxHorizontalEntries",
        "type": "property"
      },
      {
        "text": "isRenderingDraggedItem",
        "type": "property"
      },
      {
        "text": "numEntries",
        "type": "property"
      },
      {
        "text": "entriesSelectable",
        "type": "property"
      },
      {
        "text": "showEntriesOnly",
        "type": "property"
      },
      {
        "text": "dropIntoSelfEnabled",
        "type": "property"
      },
      {
        "text": "dropIntoEnabled",
        "type": "property"
      },
      {
        "text": "dragFromEnabled",
        "type": "property"
      },
      {
        "text": "padding",
        "type": "property"
      },
      {
        "text": "onInsertedFunction",
        "type": "property"
      },
      {
        "text": "onSelectedFunction",
        "type": "property"
      },
      {
        "text": "onDeselectedFunction",
        "type": "property"
      },
      {
        "text": "onClickedFunction",
        "type": "property"
      },
      {
        "text": "onDroppedFunction",
        "type": "property"
      },
      {
        "text": "onReceivedFunction",
        "type": "property"
      }
    ]
  },
  {
    "text": "CheckBox",
    "snippet": "CheckBox(${1:index})${20}",
    "svc": "Client",
    "description": "A new instance of CheckBox",
    "inherited": "UIElement",
    "properties": [
      {
        "text": "checked",
        "type": "property"
      },
      {
        "text": "active",
        "type": "property"
      },
      {
        "text": "caption",
        "type": "property"
      },
      {
        "text": "fontSize",
        "type": "property"
      },
      {
        "text": "bold",
        "type": "property"
      },
      {
        "text": "italic",
        "type": "property"
      },
      {
        "text": "captionLeft",
        "type": "property"
      },
      {
        "text": "onCheckedFunction",
        "type": "property"
      }
    ]
  },
  {
    "text": "Label",
    "snippet": "Label(${1:index})${20}",
    "svc": "Client",
    "description": "A new instance of Label",
    "inherited": "UIElement",
    "members": [
      {
        "text": "setLeftAligned",
        "snippet": "setLeftAligned()${1}"
      },
      {
        "text": "setRightAligned",
        "snippet": "setRightAligned()${1}"
      },
      {
        "text": "setBottomLeftAligned",
        "snippet": "setBottomLeftAligned()${1}"
      },
      {
        "text": "setBottomRightAligned",
        "snippet": "setBottomRightAligned()${1}"
      },
      {
        "text": "setBottomAligned",
        "snippet": "setBottomAligned()${1}"
      },
      {
        "text": "setTopLeftAligned",
        "snippet": "setTopLeftAligned()${1}"
      },
      {
        "text": "setTopRightAligned",
        "snippet": "setTopRightAligned()${1}"
      },
      {
        "text": "setTopAligned",
        "snippet": "setTopAligned()${1}"
      }
    ],
    "properties": [
      {
        "text": "active",
        "type": "property"
      },
      {
        "text": "caption",
        "type": "property"
      },
      {
        "text": "font",
        "type": "property"
      },
      {
        "text": "fontSize",
        "type": "property"
      },
      {
        "text": "centered",
        "type": "property"
      },
      {
        "text": "bold",
        "type": "property"
      },
      {
        "text": "italic",
        "type": "property"
      },
      {
        "text": "color",
        "type": "property"
      },
      {
        "text": "mouseDownFunction",
        "type": "property"
      }
    ]
  },
  {
    "text": "TextField",
    "snippet": "TextField(${1:index})${20}",
    "svc": "Client",
    "description": "A new instance of TextField",
    "inherited": "UIElement",
    "properties": [
      {
        "text": "text",
        "type": "property"
      },
      {
        "text": "fontSize",
        "type": "property"
      },
      {
        "text": "padding",
        "type": "property"
      }
    ]
  },
  {
    "text": "Button",
    "snippet": "Button(${1:index})${20}",
    "svc": "Client",
    "description": "A new instance of Button",
    "inherited": "UIElement",
    "properties": [
      {
        "text": "active",
        "type": "property"
      },
      {
        "text": "textSize",
        "type": "property"
      },
      {
        "text": "maxTextSize",
        "type": "property"
      },
      {
        "text": "bold",
        "type": "property"
      },
      {
        "text": "caption",
        "type": "property"
      },
      {
        "text": "icon",
        "type": "property"
      },
      {
        "text": "onPressedFunction",
        "type": "property"
      }
    ]
  },
  {
    "text": "InventoryReferenceSelectionItem",
    "snippet": "InventoryReferenceSelectionItem()${1}",
    "svc": "Client",
    "description": "A new instance of InventoryReferenceSelectionItem",
    "properties": [
      {
        "text": "item",
        "type": "property"
      },
      {
        "text": "index",
        "type": "property"
      },
      {
        "text": "deleteable",
        "type": "property"
      },
      {
        "text": "readyForDeletion",
        "type": "property"
      },
      {
        "text": "highlighted",
        "type": "property"
      },
      {
        "text": "uvalue",
        "type": "property"
      },
      {
        "text": "amount",
        "type": "property"
      },
      {
        "text": "favorite",
        "type": "property"
      },
      {
        "text": "trash",
        "type": "property"
      },
      {
        "text": "recent",
        "type": "property"
      },
      {
        "text": "border",
        "type": "property"
      }
    ]
  },
  {
    "text": "Picture",
    "snippet": "Picture(${1:index})${20}",
    "svc": "Client",
    "description": "A new instance of Picture",
    "inherited": "UIElement",
    "members": [
      {
        "text": "clear",
        "snippet": "clear(${1:color})${20}"
      }
    ],
    "properties": [
      {
        "text": "picture",
        "type": "property"
      },
      {
        "text": "flipped",
        "type": "property"
      },
      {
        "text": "isIcon",
        "type": "property"
      },
      {
        "text": "color",
        "type": "property"
      }
    ]
  },
  {
    "text": "UIRenderer",
    "snippet": "UIRenderer()${1}",
    "svc": "Client",
    "description": "A new instance of UIRenderer",
    "members": [
      {
        "text": "renderLine",
        "snippet": "renderLine(${1:vec2}, ${2:vec2}, ${3:color}, ${4:int})${20}"
      },
      {
        "text": "renderOutlinedLine",
        "snippet": "renderOutlinedLine(${1:vec2}, ${2:vec2}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:color}, ${8:int})${20}"
      },
      {
        "text": "renderTargeter",
        "snippet": "renderTargeter(${1:vec2}, ${2:float}, ${3:color}, ${4:int})${20}"
      },
      {
        "text": "renderEntityTargeter",
        "snippet": "renderEntityTargeter(${1:x}, ${2:color}, ${3:size}, ${4:layer})${20}"
      },
      {
        "text": "renderRect",
        "snippet": "renderRect(${1:vec2}, ${2:vec2}, ${3:color}, ${4:int})${20}"
      },
      {
        "text": "renderArrow",
        "snippet": "renderArrow(${1:vec2}, ${2:color}, ${3:int})${20}"
      },
      {
        "text": "renderCentralArrow",
        "snippet": "renderCentralArrow(${1:vec2}, ${2:float}, ${3:float}, ${4:float}, ${5:color}, ${6:int})${20}"
      },
      {
        "text": "renderEntityArrow",
        "snippet": "renderEntityArrow(${1:entity}, ${2width}, ${3:length}, ${4:visibilityThreshold}, ${5:color}, ${6:layer})${20}"
      },
      {
        "text": "display",
        "snippet": "display()${1}"
      }
    ]
  },
  {
    "text": "NumbersBar",
    "snippet": "NumbersBar(${1:index})${20}",
    "svc": "Client",
    "description": "A new instance of NumbersBar",
    "inherited": "UIElement",
    "members": [
      {
        "text": "clear",
        "snippet": "clear()${1}"
      },
      {
        "text": "setRange",
        "snippet": "setRange(${1:minRange}, ${1:maxRange})${20}"
      },
      {
        "text": "addEntry",
        "snippet": "addEntry(${1:num}, ${1:name}, ${1:color})${20}"
      }
    ]
  },
  {
    "text": "UIContainer",
    "snippet": "UIContainer(${1:index})${20}",
    "svc": "Client",
    "description": "A new instance of UIContainer",
    "inherited": [
      "UIElement",
      "UIContainer"
    ]
  },
  {
    "text": "Planet",
    "snippet": "Planet()${1}",
    "svc": "Client",
    "description": "A new instance of Planet",
    "properties": [
      {
        "text": "position",
        "type": "property"
      },
      {
        "text": "size",
        "type": "property"
      }
    ]
  },
  {
    "text": "Achievements",
    "snippet": "Achievements()${1}",
    "svc": "Client",
    "description": "A new instance of Achievements",
    "members": [
      {
        "text": "unlockProvokedSwoks",
        "snippet": "unlockProvokedSwoks()${1}"
      }
    ]
  },
  {
    "text": "GalaxyMap",
    "snippet": "GalaxyMap()${1}",
    "svc": "Client",
    "description": "A new instance of GalaxyMap",
    "members": [
      {
        "text": "show",
        "snippet": "show(${1:x}, ${2:y})${20}"
      },
      {
        "text": "hide",
        "snippet": "hide()${1}"
      },
      {
        "text": "lookAt",
        "snippet": "lookAt(${1:x}, ${2:y})${20}"
      },
      {
        "text": "getSelectedCoordinates",
        "snippet": "getSelectedCoordinates()${1}"
      },
      {
        "text": "setSelectedCoordinates",
        "snippet": "setSelectedCoordinates(${1:x}, ${2:y})${20}"
      }
    ]
  },
  {
    "text": "Mouse",
    "snippet": "Mouse()${1}",
    "svc": "Client",
    "description": "A new instance of Mouse",
    "members": [
      {
        "text": "mouseDown",
        "snippet": "mouseDown(${1:button})${20}"
      },
      {
        "text": "mouseUp",
        "snippet": "mouseUp(${1:button})${20}"
      },
      {
        "text": "mousePressed",
        "snippet": "mousePressed(${1:button})${20}"
      }
    ],
    "properties": [
      {
        "text": "position",
        "type": "property"
      }
    ]
  },
  {
    "text": "Keyboard",
    "snippet": "Keyboard()${1}",
    "svc": "Client",
    "description": "A new instance of Keyboard",
    "members": [
      {
        "text": "keyDown",
        "snippet": "keyDown(${1:keyName})${20}"
      },
      {
        "text": "keyUp",
        "snippet": "keyUp(${1:keyName})${20}"
      },
      {
        "text": "keyPressed",
        "snippet": "keyPressed(${1:keyName})${20}"
      }
    ]
  },
  {
    "text": "LaserFX",
    "snippet": "LaserFX()${1}",
    "svc": "Client",
    "description": "A new instance of LaserFX",
    "properties": [
      {
        "text": "offset",
        "type": "property"
      },
      {
        "text": "randomNumber",
        "type": "property"
      },
      {
        "text": "from",
        "type": "property"
      },
      {
        "text": "origin",
        "type": "property"
      },
      {
        "text": "direction",
        "type": "property"
      },
      {
        "text": "to",
        "type": "property"
      },
      {
        "text": "ending",
        "type": "property"
      },
      {
        "text": "aliveTime",
        "type": "property"
      },
      {
        "text": "maxAliveTime",
        "type": "property"
      },
      {
        "text": "fadeOutTime",
        "type": "property"
      },
      {
        "text": "length",
        "type": "property"
      },
      {
        "text": "shape",
        "type": "property"
      },
      {
        "text": "shapeSize",
        "type": "property"
      },
      {
        "text": "width",
        "type": "property"
      },
      {
        "text": "auraWidth",
        "type": "property"
      },
      {
        "text": "animation",
        "type": "property"
      },
      {
        "text": "animationSpeed",
        "type": "property"
      },
      {
        "text": "animationAcceleration",
        "type": "property"
      },
      {
        "text": "innerColor",
        "type": "property"
      },
      {
        "text": "outerColor",
        "type": "property"
      },
      {
        "text": "collision",
        "type": "property"
      }
    ]
  },
  {
    "text": "QuadTree",
    "snippet": "QuadTree(${1:vec2 ${2:vec2}, ${3:int})${20}",
    "description": "A new instance of QuadTree",
    "members": [
      {
        "text": "insert",
        "snippet": "insert(${1:vec2})${20}"
      },
      {
        "text": "get",
        "snippet": "get(${1:vec2}, ${2:float})${20}"
      },
      {
        "text": "nearest",
        "snippet": "nearest(${1:x}, ${2:y}, ${3:radius})${20}"
      }
    ]
  },
  {
    "text": "Uuid",
    "snippet": "Uuid(${1:uuid})${20}",
    "description": "A new instance of Uuid",
    "members": [
      {
        "text": "reset",
        "snippet": "reset()${1}"
      },
      {
        "text": "toRandom",
        "snippet": "toRandom()${1}"
      },
      {
        "text": "__tostring",
        "snippet": "__tostring()${1}"
      },
      {
        "text": "__eq",
        "snippet": "__eq(${1:other})${20}"
      },
      {
        "text": "__lt",
        "snippet": "__lt(${1:other})${20}"
      },
      {
        "text": "__le",
        "snippet": "__le(${1:other})${20}"
      }
    ],
    "properties": [
      {
        "text": "value",
        "type": "property"
      },
      {
        "text": "string",
        "type": "property"
      },
      {
        "text": "number",
        "type": "property"
      },
      {
        "text": "isNil",
        "type": "property"
      }
    ]
  },
  {
    "text": "Timer",
    "snippet": "Timer()${1}",
    "description": "A new instance of Timer",
    "members": [
      {
        "text": "start",
        "snippet": "start()${1}"
      },
      {
        "text": "restart",
        "snippet": "restart()${1}"
      },
      {
        "text": "reset",
        "snippet": "reset()${1}"
      },
      {
        "text": "stop",
        "snippet": "stop()${1}"
      }
    ],
    "properties": [
      {
        "text": "milliseconds",
        "type": "property"
      },
      {
        "text": "microseconds",
        "type": "property"
      },
      {
        "text": "seconds",
        "type": "property"
      },
      {
        "text": "secondsStr",
        "type": "property"
      },
      {
        "text": "running",
        "type": "property"
      }
    ]
  },
  {
    "text": "Profiler",
    "snippet": "Profiler(${1:str})${20}",
    "description": "A new instance of Profiler",
    "members": [
      {
        "text": "section",
        "snippet": "section(${1:string})${20}"
      },
      {
        "text": "reenter",
        "snippet": "reenter(${1:string})${20}"
      },
      {
        "text": "done",
        "snippet": "done()${1}"
      },
      {
        "text": "reset",
        "snippet": "reset()${1}"
      },
      {
        "text": "addSection",
        "snippet": "addSection(${1:string}, ${2:double})${20}"
      },
      {
        "text": "__tostring",
        "snippet": "__tostring()${1}"
      },
      {
        "text": "print",
        "snippet": "print()${1}"
      }
    ],
    "properties": [
      {
        "text": "started",
        "type": "property"
      },
      {
        "text": "printedSections",
        "type": "property"
      }
    ]
  },
  {
    "text": "Ray",
    "snippet": "Ray(${1:vec3}, ${2:vec3})${20}",
    "description": "A new instance of Ray",
    "members": [
      {
        "text": "distanceToPoint",
        "snippet": "distanceToPoint(${1:vec3})${20}"
      },
      {
        "text": "distanceToPoint2",
        "snippet": "distanceToPoint2(${1:vec3})${20}"
      },
      {
        "text": "findClosestPoints",
        "snippet": "findClosestPoints(${1:ray}, ${2:vec3}, ${3:vec3})${20}"
      }
    ],
    "properties": [
      {
        "text": "origin",
        "type": "property"
      },
      {
        "text": "direction",
        "type": "property"
      }
    ]
  },
  {
    "text": "Color",
    "snippet": "Color()${1}",
    "description": "A new instance of Color",
    "members": [
      {
        "text": "toInt",
        "snippet": "toInt()${1}"
      },
      {
        "text": "setHSV",
        "snippet": "setHSV(${1:h}, ${2:s}, ${3:v})${20}"
      },
      {
        "text": "__tostring",
        "snippet": "__tostring()${1}"
      }
    ],
    "properties": [
      {
        "text": "hue",
        "type": "property"
      },
      {
        "text": "saturation",
        "type": "property"
      },
      {
        "text": "value",
        "type": "property"
      },
      {
        "text": "a",
        "type": "property"
      },
      {
        "text": "r",
        "type": "property"
      },
      {
        "text": "g",
        "type": "property"
      },
      {
        "text": "b",
        "type": "property"
      }
    ]
  },
  {
    "text": "Box",
    "snippet": "Box(${1:vec3}, ${2:vec3})${20}",
    "description": "A new instance of Box",
    "properties": [
      {
        "text": "upper",
        "type": "property"
      },
      {
        "text": "lower",
        "type": "property"
      },
      {
        "text": "size",
        "type": "property"
      },
      {
        "text": "position",
        "type": "property"
      },
      {
        "text": "center",
        "type": "property"
      }
    ]
  },
  {
    "text": "vec2",
    "snippet": "vec2(${1:float}, ${2:float})${20}",
    "description": "A new instance of vec2",
    "members": [
      {
        "text": "__add",
        "snippet": "__add(${1:var})${20}"
      },
      {
        "text": "__sub",
        "snippet": "__sub(${1:var})${20}"
      },
      {
        "text": "__mul",
        "snippet": "__mul(${1:var})${20}"
      },
      {
        "text": "__div",
        "snippet": "__div(${1:var})${20}"
      },
      {
        "text": "__unm",
        "snippet": "__unm()${1}"
      },
      {
        "text": "__tostring",
        "snippet": "__tostring()${1}"
      }
    ],
    "properties": [
      {
        "text": "x",
        "type": "property"
      },
      {
        "text": "y",
        "type": "property"
      }
    ]
  },
  {
    "text": "vec3",
    "snippet": "vec3(${1:float}, ${2:float}, ${3:float})${20}",
    "description": "A new instance of vec3",
    "members": [
      {
        "text": "__add",
        "snippet": "__add(${1:var})${20}"
      },
      {
        "text": "__sub",
        "snippet": "__sub(${1:var})${20}"
      },
      {
        "text": "__mul",
        "snippet": "__mul(${1:var})${20}"
      },
      {
        "text": "__div",
        "snippet": "__div(${1:var})${20}"
      },
      {
        "text": "__unm",
        "snippet": "__unm()${1}"
      },
      {
        "text": "__tostring",
        "snippet": "__tostring()${1}"
      }
    ],
    "properties": [
      {
        "text": "x",
        "type": "property"
      },
      {
        "text": "y",
        "type": "property"
      },
      {
        "text": "z",
        "type": "property"
      }
    ]
  },
  {
    "text": "vec4",
    "snippet": "vec4(${1:float}, ${2:float}, ${3:float}, ${4:float})${20}",
    "description": "A new instance of vec4",
    "members": [
      {
        "text": "__add",
        "snippet": "__add(${1:var})${20}"
      },
      {
        "text": "__sub",
        "snippet": "__sub(${1:var})${20}"
      },
      {
        "text": "__mul",
        "snippet": "__mul(${1:var})${20}"
      },
      {
        "text": "__div",
        "snippet": "__div(${1:var})${20}"
      },
      {
        "text": "__unm",
        "snippet": "__unm()${1}"
      },
      {
        "text": "__tostring",
        "snippet": "__tostring()${1}"
      }
    ],
    "properties": [
      {
        "text": "x",
        "type": "property"
      },
      {
        "text": "y",
        "type": "property"
      },
      {
        "text": "z",
        "type": "property"
      },
      {
        "text": "w",
        "type": "property"
      }
    ]
  },
  {
    "text": "dvec2",
    "snippet": "dvec2(${1:double}, ${2:double})${20}",
    "description": "A new instance of dvec2",
    "members": [
      {
        "text": "__add",
        "snippet": "__add(${1:var})${20}"
      },
      {
        "text": "__sub",
        "snippet": "__sub(${1:var})${20}"
      },
      {
        "text": "__mul",
        "snippet": "__mul(${1:var})${20}"
      },
      {
        "text": "__div",
        "snippet": "__div(${1:var})${20}"
      },
      {
        "text": "__unm",
        "snippet": "__unm()${1}"
      },
      {
        "text": "__tostring",
        "snippet": "__tostring()${1}"
      }
    ],
    "properties": [
      {
        "text": "x",
        "type": "property"
      },
      {
        "text": "y",
        "type": "property"
      }
    ]
  },
  {
    "text": "dvec3",
    "snippet": "dvec3(${1:double}, ${2:double}, ${3:double})${20}",
    "description": "A new instance of dvec3",
    "members": [
      {
        "text": "__add",
        "snippet": "__add(${1:var})${20}"
      },
      {
        "text": "__sub",
        "snippet": "__sub(${1:var})${20}"
      },
      {
        "text": "__mul",
        "snippet": "__mul(${1:var})${20}"
      },
      {
        "text": "__div",
        "snippet": "__div(${1:var})${20}"
      },
      {
        "text": "__unm",
        "snippet": "__unm()${1}"
      },
      {
        "text": "__tostring",
        "snippet": "__tostring()${1}"
      }
    ],
    "properties": [
      {
        "text": "x",
        "type": "property"
      },
      {
        "text": "y",
        "type": "property"
      },
      {
        "text": "z",
        "type": "property"
      }
    ]
  },
  {
    "text": "dvec4",
    "snippet": "dvec4(${1:double}, ${2:double}, ${3:double}, ${4:double})${20}",
    "description": "A new instance of dvec4",
    "members": [
      {
        "text": "__add",
        "snippet": "__add(${1:var})${20}"
      },
      {
        "text": "__sub",
        "snippet": "__sub(${1:var})${20}"
      },
      {
        "text": "__mul",
        "snippet": "__mul(${1:var})${20}"
      },
      {
        "text": "__div",
        "snippet": "__div(${1:var})${20}"
      },
      {
        "text": "__unm",
        "snippet": "__unm()${1}"
      },
      {
        "text": "__tostring",
        "snippet": "__tostring()${1}"
      }
    ],
    "properties": [
      {
        "text": "x",
        "type": "property"
      },
      {
        "text": "y",
        "type": "property"
      },
      {
        "text": "z",
        "type": "property"
      },
      {
        "text": "w",
        "type": "property"
      }
    ]
  },
  {
    "text": "ivec2",
    "snippet": "ivec2(${1:int}, ${2:int})${20}",
    "description": "A new instance of ivec2",
    "members": [
      {
        "text": "__add",
        "snippet": "__add(${1:var})${20}"
      },
      {
        "text": "__sub",
        "snippet": "__sub(${1:var})${20}"
      },
      {
        "text": "__mul",
        "snippet": "__mul(${1:var})${20}"
      },
      {
        "text": "__div",
        "snippet": "__div(${1:var})${20}"
      },
      {
        "text": "__unm",
        "snippet": "__unm()${1}"
      },
      {
        "text": "__tostring",
        "snippet": "__tostring()${1}"
      }
    ],
    "properties": [
      {
        "text": "x",
        "type": "property"
      },
      {
        "text": "y",
        "type": "property"
      }
    ]
  },
  {
    "text": "ivec3",
    "snippet": "ivec3(${1:int}, ${2:int}, ${3:int})${20}",
    "description": "A new instance of ivec3",
    "members": [
      {
        "text": "__add",
        "snippet": "__add(${1:var})${20}"
      },
      {
        "text": "__sub",
        "snippet": "__sub(${1:var})${20}"
      },
      {
        "text": "__mul",
        "snippet": "__mul(${1:var})${20}"
      },
      {
        "text": "__div",
        "snippet": "__div(${1:var})${20}"
      },
      {
        "text": "__unm",
        "snippet": "__unm()${1}"
      },
      {
        "text": "__tostring",
        "snippet": "__tostring()${1}"
      }
    ],
    "properties": [
      {
        "text": "x",
        "type": "property"
      },
      {
        "text": "y",
        "type": "property"
      },
      {
        "text": "z",
        "type": "property"
      }
    ]
  },
  {
    "text": "ivec4",
    "snippet": "ivec4(${1:int}, ${2:int}, ${3:int}, ${4:int})${20}",
    "description": "A new instance of ivec4",
    "members": [
      {
        "text": "__add",
        "snippet": "__add(${1:var})${20}"
      },
      {
        "text": "__sub",
        "snippet": "__sub(${1:var})${20}"
      },
      {
        "text": "__mul",
        "snippet": "__mul(${1:var})${20}"
      },
      {
        "text": "__div",
        "snippet": "__div(${1:var})${20}"
      },
      {
        "text": "__unm",
        "snippet": "__unm()${1}"
      },
      {
        "text": "__tostring",
        "snippet": "__tostring()${1}"
      }
    ],
    "properties": [
      {
        "text": "x",
        "type": "property"
      },
      {
        "text": "y",
        "type": "property"
      },
      {
        "text": "z",
        "type": "property"
      },
      {
        "text": "w",
        "type": "property"
      }
    ]
  },
  {
    "text": "Rect",
    "snippet": "Rect(${1:a}, ${2:b}, ${3:a}, ${4:b})${20}",
    "description": "A new instance of Rect",
    "properties": [
      {
        "text": "lower",
        "type": "property"
      },
      {
        "text": "upper",
        "type": "property"
      },
      {
        "text": "position",
        "type": "property"
      },
      {
        "text": "size",
        "type": "property"
      },
      {
        "text": "height",
        "type": "property"
      },
      {
        "text": "width",
        "type": "property"
      },
      {
        "text": "area",
        "type": "property"
      },
      {
        "text": "topLeft",
        "type": "property"
      },
      {
        "text": "topRight",
        "type": "property"
      },
      {
        "text": "bottomLeft",
        "type": "property"
      },
      {
        "text": "bottomRight",
        "type": "property"
      }
    ]
  },
  {
    "text": "Matrix",
    "snippet": "Matrix()${1}",
    "description": "A new instance of Matrix",
    "members": [
      {
        "text": "transform",
        "snippet": "transform(${1:vec3})${20}"
      },
      {
        "text": "transformCoord",
        "snippet": "transformCoord(${1:vec3})${20}"
      },
      {
        "text": "transformNormal",
        "snippet": "transformNormal(${1:vec3})${20}"
      },
      {
        "text": "getInverse",
        "snippet": "getInverse()${1}"
      },
      {
        "text": "getValue",
        "snippet": "getValue(${1:int}, ${2:int})${20}"
      },
      {
        "text": "setValue",
        "snippet": "setValue(${1:int}, ${2:int}, ${3:float})${20}"
      },
      {
        "text": "__mul",
        "snippet": "__mul(${1:matrix})${20}"
      }
    ],
    "properties": [
      {
        "text": "right",
        "type": "property"
      },
      {
        "text": "up",
        "type": "property"
      },
      {
        "text": "look",
        "type": "property"
      },
      {
        "text": "translation",
        "type": "property"
      },
      {
        "text": "pos",
        "type": "property"
      },
      {
        "text": "position",
        "type": "property"
      }
    ]
  },
  {
    "text": "Sphere",
    "snippet": "Sphere(${1:vec3}, ${2:float})${20}",
    "description": "A new instance of Sphere",
    "properties": [
      {
        "text": "center",
        "type": "property"
      },
      {
        "text": "radius",
        "type": "property"
      }
    ]
  },
  {
    "text": "Seed",
    "snippet": "Seed(${1:in})${20}",
    "description": "A new instance of Seed",
    "members": [
      {
        "text": "__tostring",
        "snippet": "__tostring()${1}"
      },
      {
        "text": "__add",
        "snippet": "__add(${1:int})${20}"
      },
      {
        "text": "__sub",
        "snippet": "__sub(${1:int})${20}"
      },
      {
        "text": "__mul",
        "snippet": "__mul(${1:int})${20}"
      },
      {
        "text": "__div",
        "snippet": "__div(${1:int})${20}"
      },
      {
        "text": "__unm",
        "snippet": "__unm()${1}"
      },
      {
        "text": "__eq",
        "snippet": "__eq(${1:seed})${20}"
      },
      {
        "text": "__lt",
        "snippet": "__lt(${1:seed})${20}"
      },
      {
        "text": "__le",
        "snippet": "__le(${1:seed})${20}"
      }
    ],
    "properties": [
      {
        "text": "value",
        "type": "property"
      },
      {
        "text": "int32",
        "type": "property"
      }
    ]
  },
  {
    "text": "Random",
    "snippet": "Random(${1:seed})${20}",
    "description": "A new instance of Random",
    "members": [
      {
        "text": "test",
        "snippet": "test(${1:probability})${20}"
      },
      {
        "text": "getBool",
        "snippet": "getBool()${1}"
      },
      {
        "text": "getInt",
        "snippet": "getInt(${1:min}, ${1:max})${20}"
      },
      {
        "text": "getFloat",
        "snippet": "getFloat(${1:min}, ${1:max})${20}"
      },
      {
        "text": "getVector",
        "snippet": "getVector(${1:min}, ${1:max})${20}"
      },
      {
        "text": "getDirection",
        "snippet": "getDirection()${1}"
      },
      {
        "text": "get2DDirection",
        "snippet": "get2DDirection()${1}"
      },
      {
        "text": "createSeed",
        "snippet": "createSeed()${1}"
      },
      {
        "text": "setSeed",
        "snippet": "setSeed(${1:seed})${20}"
      }
    ]
  },
  {
    "text": "FighterTemplate",
    "snippet": "FighterTemplate()${1}",
    "description": "A new instance of FighterTemplate",
    "members": [
      {
        "text": "getDescriptions",
        "snippet": "getDescriptions()${1}"
      },
      {
        "text": "addDescription",
        "snippet": "addDescription(${1:string}, ${1:string})${20}"
      },
      {
        "text": "clearDescriptions",
        "snippet": "clearDescriptions()${1}"
      },
      {
        "text": "getWeapons",
        "snippet": "getWeapons()${1}"
      },
      {
        "text": "addWeapon",
        "snippet": "addWeapon(${1:var})${20}"
      },
      {
        "text": "clearWeapons",
        "snippet": "clearWeapons()${1}"
      }
    ],
    "properties": [
      {
        "text": "flavorText",
        "type": "property"
      },
      {
        "text": "numWeapons",
        "type": "property"
      },
      {
        "text": "numVisibleWeapons",
        "type": "property"
      },
      {
        "text": "weaponIcon",
        "type": "property"
      },
      {
        "text": "weaponPrefix",
        "type": "property"
      },
      {
        "text": "weaponName",
        "type": "property"
      },
      {
        "text": "reach",
        "type": "property"
      },
      {
        "text": "accuracy",
        "type": "property"
      },
      {
        "text": "continuousBeam",
        "type": "property"
      },
      {
        "text": "coolingType",
        "type": "property"
      },
      {
        "text": "coolingTime",
        "type": "property"
      },
      {
        "text": "shootingTime",
        "type": "property"
      },
      {
        "text": "heatPerShot",
        "type": "property"
      },
      {
        "text": "dps",
        "type": "property"
      },
      {
        "text": "stoneEfficiency",
        "type": "property"
      },
      {
        "text": "metalEfficiency",
        "type": "property"
      },
      {
        "text": "selfForce",
        "type": "property"
      },
      {
        "text": "otherForce",
        "type": "property"
      },
      {
        "text": "damage",
        "type": "property"
      },
      {
        "text": "hullRepairRate",
        "type": "property"
      },
      {
        "text": "shieldRepairRate",
        "type": "property"
      },
      {
        "text": "hullDamageMultiplicator",
        "type": "property"
      },
      {
        "text": "shieldDamageMultiplicator",
        "type": "property"
      },
      {
        "text": "shieldPenetration",
        "type": "property"
      },
      {
        "text": "civil",
        "type": "property"
      },
      {
        "text": "armed",
        "type": "property"
      },
      {
        "text": "seeker",
        "type": "property"
      },
      {
        "text": "rarity",
        "type": "property"
      },
      {
        "text": "material",
        "type": "property"
      },
      {
        "text": "heat",
        "type": "property"
      },
      {
        "text": "overheated",
        "type": "property"
      },
      {
        "text": "requiredShootingEnergy",
        "type": "property"
      },
      {
        "text": "shotSpeed",
        "type": "property"
      },
      {
        "text": "fireRate",
        "type": "property"
      },
      {
        "text": "averageTech",
        "type": "property"
      },
      {
        "text": "maxTech",
        "type": "property"
      },
      {
        "text": "category",
        "type": "property"
      },
      {
        "text": "maxHeat",
        "type": "property"
      },
      {
        "text": "coolingRate",
        "type": "property"
      },
      {
        "text": "baseEnergyPerSecond",
        "type": "property"
      },
      {
        "text": "energyIncreasePerSecond",
        "type": "property"
      },
      {
        "text": "firingsPerSecond",
        "type": "property"
      },
      {
        "text": "shotsPerSecond",
        "type": "property"
      },
      {
        "text": "shotsPerFiring",
        "type": "property"
      },
      {
        "text": "simultaneousShooting",
        "type": "property"
      },
      {
        "text": "firing",
        "type": "property"
      },
      {
        "text": "crew",
        "type": "property"
      },
      {
        "text": "durability",
        "type": "property"
      },
      {
        "text": "shield",
        "type": "property"
      },
      {
        "text": "turningSpeed",
        "type": "property"
      },
      {
        "text": "diameter",
        "type": "property"
      },
      {
        "text": "maxVelocity",
        "type": "property"
      },
      {
        "text": "volume",
        "type": "property"
      },
      {
        "text": "plan",
        "type": "property"
      }
    ]
  },
  {
    "text": "VanillaInventoryItem",
    "snippet": "VanillaInventoryItem()${1}",
    "description": "A new instance of VanillaInventoryItem",
    "members": [
      {
        "text": "__eq",
        "snippet": "__eq(${1:other})${20}"
      },
      {
        "text": "getValue",
        "snippet": "getValue(${1:key})${20}"
      },
      {
        "text": "getValues",
        "snippet": "getValues()${1}"
      },
      {
        "text": "setValue",
        "snippet": "setValue(${1:key}, ${2:value})${20}"
      },
      {
        "text": "setTooltip",
        "snippet": "setTooltip(${1:tooltip})${20}"
      },
      {
        "text": "getTooltip",
        "snippet": "getTooltip()${1}"
      }
    ],
    "properties": [
      {
        "text": "name",
        "type": "property"
      },
      {
        "text": "rarity",
        "type": "property"
      },
      {
        "text": "favorite",
        "type": "property"
      },
      {
        "text": "trash",
        "type": "property"
      },
      {
        "text": "recent",
        "type": "property"
      },
      {
        "text": "icon",
        "type": "property"
      },
      {
        "text": "iconColor",
        "type": "property"
      },
      {
        "text": "price",
        "type": "property"
      },
      {
        "text": "itemType",
        "type": "property"
      },
      {
        "text": "stackable",
        "type": "property"
      }
    ]
  },
  {
    "text": "Rarity",
    "snippet": "Rarity(${1:int})${20}",
    "description": "A new instance of Rarity",
    "members": [
      {
        "text": "__eq",
        "snippet": "__eq(${1:other})${20}"
      },
      {
        "text": "__lt",
        "snippet": "__lt(${1:other})${20}"
      },
      {
        "text": "__tostring",
        "snippet": "__tostring()${1}"
      }
    ],
    "properties": [
      {
        "text": "value",
        "type": "property"
      },
      {
        "text": "color",
        "type": "property"
      },
      {
        "text": "name",
        "type": "property"
      }
    ]
  },
  {
    "text": "PlanetSpecifics",
    "snippet": "PlanetSpecifics()${1}",
    "description": "A new instance of PlanetSpecifics",
    "properties": [
      {
        "text": "type",
        "type": "property"
      },
      {
        "text": "habitated",
        "type": "property"
      },
      {
        "text": "clouds",
        "type": "property"
      },
      {
        "text": "atmosphere",
        "type": "property"
      },
      {
        "text": "ring",
        "type": "property"
      },
      {
        "text": "size",
        "type": "property"
      },
      {
        "text": "___",
        "type": "property"
      }
    ]
  },
  {
    "text": "CraftStyle",
    "snippet": "CraftStyle()${1}",
    "description": "A new instance of CraftStyle"
  },
  {
    "text": "BlockPlanBlock",
    "snippet": "BlockPlanBlock()${1}",
    "description": "A new instance of BlockPlanBlock",
    "members": [
      {
        "text": "getChildren",
        "snippet": "getChildren()${1}"
      }
    ],
    "properties": [
      {
        "text": "parent",
        "type": "property"
      },
      {
        "text": "index",
        "type": "property"
      },
      {
        "text": "numChildren",
        "type": "property"
      },
      {
        "text": "box",
        "type": "property"
      },
      {
        "text": "color",
        "type": "property"
      },
      {
        "text": "material",
        "type": "property"
      },
      {
        "text": "orientation",
        "type": "property"
      },
      {
        "text": "blockIndex",
        "type": "property"
      }
    ]
  },
  {
    "text": "BlockPlan",
    "snippet": "BlockPlan()${1}",
    "description": "A new instance of BlockPlan",
    "members": [
      {
        "text": "scale",
        "snippet": "scale(${1:vec3})${20}"
      },
      {
        "text": "displace",
        "snippet": "displace(${1:vec3})${20}"
      },
      {
        "text": "center",
        "snippet": "center()${1}"
      },
      {
        "text": "rotate",
        "snippet": "rotate(${1:axis}, ${2:dir})${20}"
      },
      {
        "text": "mirror",
        "snippet": "mirror(${1:axis}, ${2:mirrorCenter})${20}"
      },
      {
        "text": "resetDurability",
        "snippet": "resetDurability()${1}"
      },
      {
        "text": "addBlock",
        "snippet": "addBlock(${1:position}, ${1:size}, ${1:parentIndex}, ${1:index}, ${1:color}, ${1:material}, ${1:orientation}, ${1:blockIndex})${20}"
      },
      {
        "text": "addPlan",
        "snippet": "addPlan(${1:parentIndex}, ${2:blockPlan}, ${3:int})${20}"
      },
      {
        "text": "addPlanDisplaced",
        "snippet": "addPlanDisplaced(${1:parentIndex}, ${2:blockPlan}, ${3:int}, ${4:delta})${20}"
      },
      {
        "text": "removeBlock",
        "snippet": "removeBlock(${1:int})${20}"
      },
      {
        "text": "deleteSubTree",
        "snippet": "deleteSubTree(${1:int})${20}"
      },
      {
        "text": "divide",
        "snippet": "divide(${1:blockIndex})${20}"
      },
      {
        "text": "exists",
        "snippet": "exists(${1:index})${20}"
      },
      {
        "text": "empty",
        "snippet": "empty()${1}"
      },
      {
        "text": "propertiesEqual",
        "snippet": "propertiesEqual(${1:blockPlan})${20}"
      },
      {
        "text": "setBlockColor",
        "snippet": "setBlockColor(${1:index}, ${2:color})${20}"
      },
      {
        "text": "setBlockType",
        "snippet": "setBlockType(${1:int}, ${2:int})${20}"
      },
      {
        "text": "setMaterial",
        "snippet": "setMaterial(${1:material})${20}"
      },
      {
        "text": "setColor",
        "snippet": "setColor(${1:color})${20}"
      },
      {
        "text": "getBoundingSphere",
        "snippet": "getBoundingSphere()${1}"
      },
      {
        "text": "getBlock",
        "snippet": "getBlock(${1:index})${20}"
      },
      {
        "text": "getNthBlock",
        "snippet": "getNthBlock(${1:int})${20}"
      },
      {
        "text": "getNthIndex",
        "snippet": "getNthIndex(${1:int})${20}"
      },
      {
        "text": "getBlockIndices",
        "snippet": "getBlockIndices()${1}"
      },
      {
        "text": "getBoundingBox",
        "snippet": "getBoundingBox()${1}"
      },
      {
        "text": "getMoneyValue",
        "snippet": "getMoneyValue()${1}"
      },
      {
        "text": "getResourceValue",
        "snippet": "getResourceValue()${1}"
      },
      {
        "text": "getUndamagedMoneyValue",
        "snippet": "getUndamagedMoneyValue()${1}"
      },
      {
        "text": "getUndamagedResourceValue",
        "snippet": "getUndamagedResourceValue()${1}"
      }
    ],
    "properties": [
      {
        "text": "root",
        "type": "property"
      },
      {
        "text": "rootIndex",
        "type": "property"
      },
      {
        "text": "numBlocks",
        "type": "property"
      },
      {
        "text": "radius",
        "type": "property"
      },
      {
        "text": "durability",
        "type": "property"
      },
      {
        "text": "volume",
        "type": "property"
      },
      {
        "text": "centerOfMass",
        "type": "property"
      },
      {
        "text": "accumulatingHealth",
        "type": "property"
      },
      {
        "text": "convex",
        "type": "property"
      }
    ]
  },
  {
    "text": "EntityDescriptor",
    "snippet": "EntityDescriptor()${1}",
    "description": "A new instance of EntityDescriptor",
    "inherited": "Entity",
    "members": [
      {
        "text": "addComponents",
        "snippet": "addComponents(${1:types})${20}"
      },
      {
        "text": "addComponent",
        "snippet": "addComponent(${1:type})${20}"
      },
      {
        "text": "removeComponent",
        "snippet": "removeComponent(${1:type})${20}"
      }
    ]
  },
  {
    "text": "Language",
    "snippet": "Language(${1:seed})${20}",
    "description": "A new instance of Language",
    "members": [
      {
        "text": "getWord",
        "snippet": "getWord()${1}"
      },
      {
        "text": "getName",
        "snippet": "getName()${1}"
      },
      {
        "text": "getFactionName",
        "snippet": "getFactionName()${1}"
      },
      {
        "text": "getSyllable",
        "snippet": "getSyllable()${1}"
      },
      {
        "text": "getSyllableCombination",
        "snippet": "getSyllableCombination(${1:int})${20}"
      },
      {
        "text": "getVocalSound",
        "snippet": "getVocalSound()${1}"
      },
      {
        "text": "getConsonantSound",
        "snippet": "getConsonantSound()${1}"
      },
      {
        "text": "getVocalSounds",
        "snippet": "getVocalSounds()${1}"
      },
      {
        "text": "getConsonantSounds",
        "snippet": "getConsonantSounds()${1}"
      },
      {
        "text": "getGeneratedWords",
        "snippet": "getGeneratedWords()${1}"
      },
      {
        "text": "setVocalSounds",
        "snippet": "setVocalSounds(${1:string})${20}"
      },
      {
        "text": "setConsonantSounds",
        "snippet": "setConsonantSounds(${1:string})${20}"
      },
      {
        "text": "setGeneratedWords",
        "snippet": "setGeneratedWords(${1:string})${20}"
      }
    ],
    "properties": [
      {
        "text": "seed",
        "type": "property"
      },
      {
        "text": "apostrophes",
        "type": "property"
      }
    ]
  },
  {
    "text": "Inventory",
    "snippet": "Inventory()${1}",
    "description": "A new instance of Inventory",
    "members": [
      {
        "text": "add",
        "snippet": "add(${1:item}, ${2:recent})${20}"
      },
      {
        "text": "addAt",
        "snippet": "addAt(${1:item}, ${2:index}, ${3:amount}, ${4:recent})${20}"
      },
      {
        "text": "remove",
        "snippet": "remove(${1:index})${20}"
      },
      {
        "text": "removeAll",
        "snippet": "removeAll(${1:index})${20}"
      },
      {
        "text": "setAmount",
        "snippet": "setAmount(${1:x}, ${2:amount})${20}"
      },
      {
        "text": "clear",
        "snippet": "clear()${1}"
      },
      {
        "text": "slotEmpty",
        "snippet": "slotEmpty(${1:index})${20}"
      },
      {
        "text": "amount",
        "snippet": "amount(${1:index})${20}"
      },
      {
        "text": "find",
        "snippet": "find(${1:index})${20}"
      },
      {
        "text": "take",
        "snippet": "take(${1:index})${20}"
      },
      {
        "text": "getItems",
        "snippet": "getItems()${1}"
      },
      {
        "text": "getItemsByType",
        "snippet": "getItemsByType(${1:type})${20}"
      }
    ],
    "properties": [
      {
        "text": "slots",
        "type": "property"
      },
      {
        "text": "occupiedSlots",
        "type": "property"
      },
      {
        "text": "items",
        "type": "property"
      },
      {
        "text": "empty",
        "type": "property"
      }
    ]
  },
  {
    "text": "PlanBspTree",
    "snippet": "PlanBspTree(${1:plan})${20}",
    "description": "A new instance of PlanBspTree",
    "members": [
      {
        "text": "getBlocksByBox",
        "snippet": "getBlocksByBox(${1:box})${20}"
      },
      {
        "text": "getBlocksBySphere",
        "snippet": "getBlocksBySphere(${1:sphere})${20}"
      },
      {
        "text": "getBlocksByOrientedBox",
        "snippet": "getBlocksByOrientedBox(${1:box}, ${2:boxOrientation})${20}"
      },
      {
        "text": "getBlocksByRay",
        "snippet": "getBlocksByRay(${1:ray}, ${2:float}, ${3:float})${20}"
      },
      {
        "text": "intersectsBox",
        "snippet": "intersectsBox(${1:box}, ${2:exceptionIndex})${20}"
      },
      {
        "text": "intersectsSphere",
        "snippet": "intersectsSphere(${1:sphere}, ${2:exceptionIndex})${20}"
      },
      {
        "text": "intersectRay",
        "snippet": "intersectRay(${1:ray}, ${2:float}, ${3:float})${20}",
        "description": "Intersects the given ray with the plan. This happens in the space of the plan.\nnil if no intersection happened, or block index as first and intersection location as second return value"
      }
    ]
  },
  {
    "text": "Weapon",
    "snippet": "Weapon()${1}",
    "description": "A new instance of Weapon",
    "members": [
      {
        "text": "propertiesEqual",
        "snippet": "propertiesEqual(${1:weapon})${20}"
      },
      {
        "text": "setProjectile",
        "snippet": "setProjectile()${1}"
      },
      {
        "text": "setBeam",
        "snippet": "setBeam()${1}"
      }
    ],
    "properties": [
      {
        "text": "dps",
        "type": "property"
      },
      {
        "text": "position",
        "type": "property"
      },
      {
        "text": "armed",
        "type": "property"
      },
      {
        "text": "civil",
        "type": "property"
      },
      {
        "text": "fireRate",
        "type": "property"
      },
      {
        "text": "shotsPerSecond",
        "type": "property"
      },
      {
        "text": "material",
        "type": "property"
      },
      {
        "text": "rarity",
        "type": "property"
      },
      {
        "text": "localPosition",
        "type": "property"
      },
      {
        "text": "shotCreationPosition",
        "type": "property"
      },
      {
        "text": "fireDelay",
        "type": "property"
      },
      {
        "text": "reach",
        "type": "property"
      },
      {
        "text": "accuracy",
        "type": "property"
      },
      {
        "text": "recoil",
        "type": "property"
      },
      {
        "text": "shieldPenetration",
        "type": "property"
      },
      {
        "text": "shotsFired",
        "type": "property"
      },
      {
        "text": "appearance",
        "type": "property"
      },
      {
        "text": "appearanceSeed",
        "type": "property"
      },
      {
        "text": "continuousBeam",
        "type": "property"
      },
      {
        "text": "seeker",
        "type": "property"
      },
      {
        "text": "icon",
        "type": "property"
      },
      {
        "text": "name",
        "type": "property"
      },
      {
        "text": "prefix",
        "type": "property"
      },
      {
        "text": "sound",
        "type": "property"
      },
      {
        "text": "damage",
        "type": "property"
      },
      {
        "text": "damageType",
        "type": "property"
      },
      {
        "text": "blockPenetration",
        "type": "property"
      },
      {
        "text": "shieldDamageMultiplicator",
        "type": "property"
      },
      {
        "text": "hullDamageMultiplicator",
        "type": "property"
      },
      {
        "text": "stoneDamageMultiplicator",
        "type": "property"
      },
      {
        "text": "hullRepair",
        "type": "property"
      },
      {
        "text": "shieldRepair",
        "type": "property"
      },
      {
        "text": "stoneEfficiency",
        "type": "property"
      },
      {
        "text": "metalEfficiency",
        "type": "property"
      },
      {
        "text": "otherForce",
        "type": "property"
      },
      {
        "text": "selfForce",
        "type": "property"
      },
      {
        "text": "impactParticles",
        "type": "property"
      },
      {
        "text": "impactSound",
        "type": "property"
      },
      {
        "text": "hullDamage",
        "type": "property"
      },
      {
        "text": "shieldDamage",
        "type": "property"
      },
      {
        "text": "isProjectile",
        "type": "property"
      },
      {
        "text": "isBeam",
        "type": "property"
      },
      {
        "text": "pmaximumTime",
        "type": "property"
      },
      {
        "text": "pvelocity",
        "type": "property"
      },
      {
        "text": "pshape",
        "type": "property"
      },
      {
        "text": "psize",
        "type": "property"
      },
      {
        "text": "pcolor",
        "type": "property"
      },
      {
        "text": "blength",
        "type": "property"
      },
      {
        "text": "bshape",
        "type": "property"
      },
      {
        "text": "bshapeSize",
        "type": "property"
      },
      {
        "text": "bwidth",
        "type": "property"
      },
      {
        "text": "bauraWidth",
        "type": "property"
      },
      {
        "text": "banimationSpeed",
        "type": "property"
      },
      {
        "text": "banimationAcceleration",
        "type": "property"
      },
      {
        "text": "binnerColor",
        "type": "property"
      },
      {
        "text": "bouterColor",
        "type": "property"
      }
    ]
  },
  {
    "text": "Crew",
    "snippet": "Crew()${1}",
    "description": "A new instance of Crew",
    "members": [
      {
        "text": "changeEmployment",
        "snippet": "changeEmployment(${1:amount}, ${2:proffession})${20}"
      },
      {
        "text": "add",
        "snippet": "add(${1:amount}, ${2:crewman})${20}"
      },
      {
        "text": "remove",
        "snippet": "remove(${1:amount}, ${2:crewman})${20}"
      },
      {
        "text": "kill",
        "snippet": "kill(${1:num})${20}"
      },
      {
        "text": "clear",
        "snippet": "clear()${1}"
      },
      {
        "text": "getMembers",
        "snippet": "getMembers()${1}"
      },
      {
        "text": "getNumMembers",
        "snippet": "getNumMembers(${1:crewmam})${20}"
      },
      {
        "text": "getMembersByProfession",
        "snippet": "getMembersByProfession(${1:proffesion})${20}"
      },
      {
        "text": "getWorkforce",
        "snippet": "getWorkforce()${1}"
      },
      {
        "text": "buildMinimumCrew",
        "snippet": "buildMinimumCrew(${1:plan})${20}"
      }
    ],
    "properties": [
      {
        "text": "maxSize",
        "type": "property"
      },
      {
        "text": "size",
        "type": "property"
      },
      {
        "text": "unemployed",
        "type": "property"
      },
      {
        "text": "engineers",
        "type": "property"
      },
      {
        "text": "gunners",
        "type": "property"
      },
      {
        "text": "miners",
        "type": "property"
      },
      {
        "text": "mechanics",
        "type": "property"
      },
      {
        "text": "pilots",
        "type": "property"
      },
      {
        "text": "security",
        "type": "property"
      },
      {
        "text": "attackers",
        "type": "property"
      },
      {
        "text": "sergeants",
        "type": "property"
      },
      {
        "text": "lieutenants",
        "type": "property"
      },
      {
        "text": "commanders",
        "type": "property"
      },
      {
        "text": "generals",
        "type": "property"
      },
      {
        "text": "captains",
        "type": "property"
      }
    ]
  },
  {
    "text": "CrewProfession",
    "snippet": "CrewProfession(${1:int})${20}",
    "description": "A new instance of CrewProfession",
    "properties": [
      {
        "text": "name",
        "type": "property"
      },
      {
        "text": "plural",
        "type": "property"
      },
      {
        "text": "description",
        "type": "property"
      },
      {
        "text": "color",
        "type": "property"
      },
      {
        "text": "price",
        "type": "property"
      },
      {
        "text": "icon",
        "type": "property"
      },
      {
        "text": "assignable",
        "type": "property"
      },
      {
        "text": "value",
        "type": "property"
      }
    ]
  },
  {
    "text": "CrewMan",
    "snippet": "CrewMan(${1:profession}, ${2:specialist}, ${3:level})${20}",
    "description": "A new instance of CrewMan",
    "properties": [
      {
        "text": "profession",
        "type": "property"
      },
      {
        "text": "specialist",
        "type": "property"
      },
      {
        "text": "level",
        "type": "property"
      }
    ]
  },
  {
    "text": "TurretTemplate",
    "snippet": "TurretTemplate()${1}",
    "description": "A new instance of TurretTemplate",
    "members": [
      {
        "text": "getCrew",
        "snippet": "getCrew()${1}"
      },
      {
        "text": "__eq",
        "snippet": "__eq(${1:other})${20}"
      },
      {
        "text": "getDescriptions",
        "snippet": "getDescriptions()${1}"
      },
      {
        "text": "addDescription",
        "snippet": "addDescription(${1:string}, ${2:string})${20}"
      },
      {
        "text": "clearDescriptions",
        "snippet": "clearDescriptions()${1}"
      },
      {
        "text": "getWeapons",
        "snippet": "getWeapons()${1}"
      },
      {
        "text": "addWeapon",
        "snippet": "addWeapon(${1:var})${20}"
      },
      {
        "text": "clearWeapons",
        "snippet": "clearWeapons()${1}"
      }
    ],
    "properties": [
      {
        "text": "flavorText",
        "type": "property"
      },
      {
        "text": "numWeapons",
        "type": "property"
      },
      {
        "text": "numVisibleWeapons",
        "type": "property"
      },
      {
        "text": "weaponIcon",
        "type": "property"
      },
      {
        "text": "weaponPrefix",
        "type": "property"
      },
      {
        "text": "weaponName",
        "type": "property"
      },
      {
        "text": "reach",
        "type": "property"
      },
      {
        "text": "accuracy",
        "type": "property"
      },
      {
        "text": "continuousBeam",
        "type": "property"
      },
      {
        "text": "coolingType",
        "type": "property"
      },
      {
        "text": "coolingTime",
        "type": "property"
      },
      {
        "text": "shootingTime",
        "type": "property"
      },
      {
        "text": "heatPerShot",
        "type": "property"
      },
      {
        "text": "dps",
        "type": "property"
      },
      {
        "text": "stoneEfficiency",
        "type": "property"
      },
      {
        "text": "metalEfficiency",
        "type": "property"
      },
      {
        "text": "selfForce",
        "type": "property"
      },
      {
        "text": "otherForce",
        "type": "property"
      },
      {
        "text": "damage",
        "type": "property"
      },
      {
        "text": "hullRepairRate",
        "type": "property"
      },
      {
        "text": "shieldRepairRate",
        "type": "property"
      },
      {
        "text": "hullDamageMultiplicator",
        "type": "property"
      },
      {
        "text": "shieldDamageMultiplicator",
        "type": "property"
      },
      {
        "text": "shieldPenetration",
        "type": "property"
      },
      {
        "text": "civil",
        "type": "property"
      },
      {
        "text": "armed",
        "type": "property"
      },
      {
        "text": "seeker",
        "type": "property"
      },
      {
        "text": "rarity",
        "type": "property"
      },
      {
        "text": "material",
        "type": "property"
      },
      {
        "text": "heat",
        "type": "property"
      },
      {
        "text": "overheated",
        "type": "property"
      },
      {
        "text": "requiredShootingEnergy",
        "type": "property"
      },
      {
        "text": "shotSpeed",
        "type": "property"
      },
      {
        "text": "fireRate",
        "type": "property"
      },
      {
        "text": "averageTech",
        "type": "property"
      },
      {
        "text": "maxTech",
        "type": "property"
      },
      {
        "text": "category",
        "type": "property"
      },
      {
        "text": "maxHeat",
        "type": "property"
      },
      {
        "text": "coolingRate",
        "type": "property"
      },
      {
        "text": "baseEnergyPerSecond",
        "type": "property"
      },
      {
        "text": "energyIncreasePerSecond",
        "type": "property"
      },
      {
        "text": "firingsPerSecond",
        "type": "property"
      },
      {
        "text": "shotsPerSecond",
        "type": "property"
      },
      {
        "text": "shotsPerFiring",
        "type": "property"
      },
      {
        "text": "simultaneousShooting",
        "type": "property"
      },
      {
        "text": "firing",
        "type": "property"
      },
      {
        "text": "size",
        "type": "property"
      },
      {
        "text": "turningSpeed",
        "type": "property"
      },
      {
        "text": "automatic",
        "type": "property"
      },
      {
        "text": "favorite",
        "type": "property"
      },
      {
        "text": "trash",
        "type": "property"
      },
      {
        "text": "recent",
        "type": "property"
      },
      {
        "text": "stackable",
        "type": "property"
      },
      {
        "text": "itemType",
        "type": "property"
      },
      {
        "text": "crew",
        "type": "property"
      }
    ]
  },
  {
    "text": "InventoryTurret",
    "snippet": "InventoryTurret()${1}",
    "description": "A new instance of InventoryTurret",
    "members": [
      {
        "text": "getCrew",
        "snippet": "getCrew()${1}"
      },
      {
        "text": "template",
        "snippet": "template()${1}"
      },
      {
        "text": "__eq",
        "snippet": "__eq(${1:other})${20}"
      },
      {
        "text": "getDescriptions",
        "snippet": "getDescriptions()${1}"
      },
      {
        "text": "addDescription",
        "snippet": "addDescription(${1:string}, ${2:string})${20}"
      },
      {
        "text": "clearDescriptions",
        "snippet": "clearDescriptions()${1}"
      },
      {
        "text": "getWeapons",
        "snippet": "getWeapons()${1}"
      },
      {
        "text": "addWeapon",
        "snippet": "addWeapon(${1:var})${20}"
      },
      {
        "text": "clearWeapons",
        "snippet": "clearWeapons()${1}"
      }
    ],
    "properties": [
      {
        "text": "flavorText",
        "type": "property"
      },
      {
        "text": "numWeapons",
        "type": "property"
      },
      {
        "text": "numVisibleWeapons",
        "type": "property"
      },
      {
        "text": "weaponIcon",
        "type": "property"
      },
      {
        "text": "weaponPrefix",
        "type": "property"
      },
      {
        "text": "weaponName",
        "type": "property"
      },
      {
        "text": "reach",
        "type": "property"
      },
      {
        "text": "accuracy",
        "type": "property"
      },
      {
        "text": "continuousBeam",
        "type": "property"
      },
      {
        "text": "coolingType",
        "type": "property"
      },
      {
        "text": "coolingTime",
        "type": "property"
      },
      {
        "text": "shootingTime",
        "type": "property"
      },
      {
        "text": "heatPerShot",
        "type": "property"
      },
      {
        "text": "dps",
        "type": "property"
      },
      {
        "text": "stoneEfficiency",
        "type": "property"
      },
      {
        "text": "metalEfficiency",
        "type": "property"
      },
      {
        "text": "selfForce",
        "type": "property"
      },
      {
        "text": "otherForce",
        "type": "property"
      },
      {
        "text": "damage",
        "type": "property"
      },
      {
        "text": "hullRepairRate",
        "type": "property"
      },
      {
        "text": "shieldRepairRate",
        "type": "property"
      },
      {
        "text": "hullDamageMultiplicator",
        "type": "property"
      },
      {
        "text": "shieldDamageMultiplicator",
        "type": "property"
      },
      {
        "text": "shieldPenetration",
        "type": "property"
      },
      {
        "text": "civil",
        "type": "property"
      },
      {
        "text": "armed",
        "type": "property"
      },
      {
        "text": "seeker",
        "type": "property"
      },
      {
        "text": "rarity",
        "type": "property"
      },
      {
        "text": "material",
        "type": "property"
      },
      {
        "text": "heat",
        "type": "property"
      },
      {
        "text": "overheated",
        "type": "property"
      },
      {
        "text": "requiredShootingEnergy",
        "type": "property"
      },
      {
        "text": "shotSpeed",
        "type": "property"
      },
      {
        "text": "fireRate",
        "type": "property"
      },
      {
        "text": "averageTech",
        "type": "property"
      },
      {
        "text": "maxTech",
        "type": "property"
      },
      {
        "text": "category",
        "type": "property"
      },
      {
        "text": "maxHeat",
        "type": "property"
      },
      {
        "text": "coolingRate",
        "type": "property"
      },
      {
        "text": "baseEnergyPerSecond",
        "type": "property"
      },
      {
        "text": "energyIncreasePerSecond",
        "type": "property"
      },
      {
        "text": "firingsPerSecond",
        "type": "property"
      },
      {
        "text": "shotsPerSecond",
        "type": "property"
      },
      {
        "text": "shotsPerFiring",
        "type": "property"
      },
      {
        "text": "simultaneousShooting",
        "type": "property"
      },
      {
        "text": "firing",
        "type": "property"
      },
      {
        "text": "size",
        "type": "property"
      },
      {
        "text": "turningSpeed",
        "type": "property"
      },
      {
        "text": "automatic",
        "type": "property"
      },
      {
        "text": "favorite",
        "type": "property"
      },
      {
        "text": "trash",
        "type": "property"
      },
      {
        "text": "recent",
        "type": "property"
      },
      {
        "text": "stackable",
        "type": "property"
      },
      {
        "text": "itemType",
        "type": "property"
      },
      {
        "text": "crew",
        "type": "property"
      }
    ]
  },
  {
    "text": "AllianceRank",
    "snippet": "AllianceRank()${1}",
    "description": "A new instance of AllianceRank",
    "members": [
      {
        "text": "getPrivileges",
        "snippet": "getPrivileges()${1}"
      }
    ],
    "properties": [
      {
        "text": "name",
        "type": "property"
      },
      {
        "text": "level",
        "type": "property"
      }
    ]
  },
  {
    "text": "TradingGood",
    "snippet": "TradingGood(${1:string}, ${2:string}, ${3:string}, ${4:string}, ${5:float}, ${6:float})${20}",
    "description": "A new instance of TradingGood",
    "members": [
      {
        "text": "__tostring",
        "snippet": "__tostring()${1}"
      },
      {
        "text": "__eq",
        "snippet": "__eq(${1:other})${20}"
      }
    ],
    "properties": [
      {
        "text": "name",
        "type": "property"
      },
      {
        "text": "description",
        "type": "property"
      },
      {
        "text": "plural",
        "type": "property"
      },
      {
        "text": "displayName",
        "type": "property"
      },
      {
        "text": "displayPlural",
        "type": "property"
      },
      {
        "text": "displayDescription",
        "type": "property"
      },
      {
        "text": "icon",
        "type": "property"
      },
      {
        "text": "price",
        "type": "property"
      },
      {
        "text": "size",
        "type": "property"
      },
      {
        "text": "illegal",
        "type": "property"
      },
      {
        "text": "stolen",
        "type": "property"
      },
      {
        "text": "suspicious",
        "type": "property"
      },
      {
        "text": "dangerous",
        "type": "property"
      }
    ]
  },
  {
    "text": "AllianceMember",
    "snippet": "AllianceMember()${1}",
    "description": "A new instance of AllianceMember",
    "properties": [
      {
        "text": "index",
        "type": "property"
      },
      {
        "text": "rank",
        "type": "property"
      },
      {
        "text": "coordinates",
        "type": "property"
      }
    ]
  },
  {
    "text": "Entity",
    "snippet": "Entity(${1:index})${20}",
    "description": "A new instance of Entity",
    "inherited": "Entity"
  },
  {
    "text": "Mail",
    "snippet": "Mail()${1}",
    "description": "A new instance of Mail",
    "members": [
      {
        "text": "hasAttachments",
        "snippet": "hasAttachments()${1}"
      },
      {
        "text": "setResources",
        "snippet": "setResources(${1:resources})${20}"
      },
      {
        "text": "getResources",
        "snippet": "getResources()${1}"
      },
      {
        "text": "getNumItems",
        "snippet": "getNumItems()${1}"
      },
      {
        "text": "addTurret",
        "snippet": "addTurret(${1:turret})${20}"
      },
      {
        "text": "removeItem",
        "snippet": "removeItem(${1:index})${20}"
      },
      {
        "text": "getItem",
        "snippet": "getItem(${1:index})${20}"
      }
    ],
    "properties": [
      {
        "text": "money",
        "type": "property"
      },
      {
        "text": "sender",
        "type": "property"
      },
      {
        "text": "receiver",
        "type": "property"
      },
      {
        "text": "header",
        "type": "property"
      },
      {
        "text": "text",
        "type": "property"
      },
      {
        "text": "read",
        "type": "property"
      },
      {
        "text": "empty",
        "type": "property"
      }
    ]
  },
  {
    "text": "Material",
    "snippet": "Material(${1:int})${20}",
    "description": "A new instance of Material",
    "members": [
      {
        "text": "__eq",
        "snippet": "__eq(${1:other})${20}"
      },
      {
        "text": "__lt",
        "snippet": "__lt(${1:other})${20}"
      },
      {
        "text": "__tostring",
        "snippet": "__tostring()${1}"
      }
    ],
    "properties": [
      {
        "text": "color",
        "type": "property"
      },
      {
        "text": "blockColor",
        "type": "property"
      },
      {
        "text": "name",
        "type": "property"
      },
      {
        "text": "strengthFactor",
        "type": "property"
      },
      {
        "text": "costFactor",
        "type": "property"
      },
      {
        "text": "density",
        "type": "property"
      },
      {
        "text": "value",
        "type": "property"
      }
    ]
  },
  {
    "text": "SystemUpgradeTemplate",
    "snippet": "SystemUpgradeTemplate(${1:script}, ${1:rarity}, ${1:seed})${20}",
    "description": "A new instance of SystemUpgradeTemplate",
    "members": [
      {
        "text": "__eq",
        "snippet": "__eq(${1:other})${20}"
      }
    ],
    "properties": [
      {
        "text": "script",
        "type": "property"
      },
      {
        "text": "seed",
        "type": "property"
      },
      {
        "text": "rarity",
        "type": "property"
      },
      {
        "text": "favorite",
        "type": "property"
      },
      {
        "text": "trash",
        "type": "property"
      },
      {
        "text": "recent",
        "type": "property"
      },
      {
        "text": "itemType",
        "type": "property"
      },
      {
        "text": "name",
        "type": "property"
      },
      {
        "text": "icon",
        "type": "property"
      },
      {
        "text": "energy",
        "type": "property"
      },
      {
        "text": "price",
        "type": "property"
      },
      {
        "text": "tooltip",
        "type": "property"
      },
      {
        "text": "stackable",
        "type": "property"
      }
    ]
  },
  {
    "text": "PlayerId",
    "snippet": "PlayerId()${1}",
    "description": "A new instance of PlayerId",
    "properties": [
      {
        "text": "id",
        "type": "property"
      },
      {
        "text": "name",
        "type": "property"
      }
    ]
  },
  {
    "text": "WreckageCreator",
    "snippet": "WreckageCreator(${1:uuid})${20}",
    "description": "A new instance of WreckageCreator",
    "properties": [
      {
        "text": "active",
        "type": "property"
      }
    ]
  },
  {
    "text": "EntityTransferrer",
    "snippet": "EntityTransferrer(${1:uuid})${20}",
    "description": "A new instance of EntityTransferrer",
    "properties": [
      {
        "text": "sectorReady",
        "type": "property"
      }
    ]
  },
  {
    "text": "FighterController",
    "snippet": "FighterController(${1:uuid})${20}",
    "description": "A new instance of FighterController",
    "members": [
      {
        "text": "setSquadOrders",
        "snippet": "setSquadOrders(${1:squad}, ${2:orders}, ${3:targetID})${20}"
      }
    ]
  },
  {
    "text": "Loot",
    "snippet": "Loot(${1:uuid})${20}",
    "description": "A new instance of Loot",
    "members": [
      {
        "text": "insert",
        "snippet": "insert(${1:item})${20}"
      }
    ]
  },
  {
    "text": "EntityIcon",
    "snippet": "EntityIcon(${1:uuid})${20}",
    "description": "A new instance of EntityIcon",
    "properties": [
      {
        "text": "icon",
        "type": "property"
      }
    ]
  },
  {
    "text": "EntityTooltip",
    "snippet": "EntityTooltip(${1:uuid})${20}",
    "description": "A new instance of EntityTooltip",
    "members": [
      {
        "text": "setTargeterTooltip",
        "snippet": "setTargeterTooltip(${1:int}, ${2:str})${20}"
      },
      {
        "text": "setDisplayTooltip",
        "snippet": "setDisplayTooltip(${1:int}, ${2:description}, ${3:str})${20}"
      }
    ]
  },
  {
    "text": "ScriptUI",
    "snippet": "ScriptUI(${1:uuid})${20}",
    "description": "A new instance of ScriptUI",
    "members": [
      {
        "text": "addDialogOption",
        "snippet": "addDialogOption(${1:text}, ${2:function})${20}",
        "description": "Adds a new dialog option to a dialog that is currently in construction. Dialogs are only in construction during the entity or player callback onStartDialog. Invoking this function at any other point will do nothing."
      },
      {
        "text": "showDialog",
        "snippet": "showDialog(${1:dialog}, ${2:closable})${20}",
        "description": "Shows a dialog, provided that the player is currently in interaction state with the parent entity. This will close and override the currently displayed dialog."
      },
      {
        "text": "interactShowDialog",
        "snippet": "interactShowDialog(${1:dialog}, ${2:closable})${20}",
        "description": "Shows a dialog, and forces the player to interact with the entity. This will close and override the currently displayed dialog."
      },
      {
        "text": "restartInteraction",
        "snippet": "restartInteraction()${1}"
      },
      {
        "text": "stopInteraction",
        "snippet": "stopInteraction()${1}"
      },
      {
        "text": "registerWindow",
        "snippet": "registerWindow(${1:window}, ${2:caption})${20}"
      },
      {
        "text": "registerInteraction",
        "snippet": "registerInteraction(${1:caption}, ${2:function})${20}"
      },
      {
        "text": "createWindow",
        "snippet": "createWindow(${1:rect})${20}"
      }
    ]
  },
  {
    "text": "Hangar",
    "snippet": "Hangar(${1:uuid})${20}",
    "description": "A new instance of Hangar",
    "members": [
      {
        "text": "addSquad",
        "snippet": "addSquad(${1:name})${20}"
      },
      {
        "text": "removeSquad",
        "snippet": "removeSquad(${1:index})${20}"
      },
      {
        "text": "addFighter",
        "snippet": "addFighter(${1:squad}, ${2:fighter})${20}"
      },
      {
        "text": "removeFighter",
        "snippet": "removeFighter(${1:index}, ${2:squad})${20}"
      },
      {
        "text": "getSquadName",
        "snippet": "getSquadName(${1:squadIndex})${20}"
      },
      {
        "text": "setSquadName",
        "snippet": "setSquadName(${1:index}, ${2:newName})${20}"
      },
      {
        "text": "moveFighterToSquad",
        "snippet": "moveFighterToSquad(${1:squadIndex}, ${2:fighterIndex}, ${3:newSquadIndex})${20}"
      },
      {
        "text": "canLand",
        "snippet": "canLand(${1:entity})${20}"
      },
      {
        "text": "getFighter",
        "snippet": "getFighter(${1:squadIndex}, ${2:fighterIndex})${20}"
      },
      {
        "text": "getSquads",
        "snippet": "getSquads()${1}"
      },
      {
        "text": "getSquadFighters",
        "snippet": "getSquadFighters(${1:squadIndex})${20}"
      },
      {
        "text": "getSquadMaxFighters",
        "snippet": "getSquadMaxFighters(${1:squadIndex})${20}"
      },
      {
        "text": "getSquadFreeSlots",
        "snippet": "getSquadFreeSlots(${1:squadIndex})${20}"
      },
      {
        "text": "getSquadMainWeaponCategory",
        "snippet": "getSquadMainWeaponCategory(${1:squadIndex})${20}"
      }
    ],
    "properties": [
      {
        "text": "minFighters",
        "type": "property"
      },
      {
        "text": "maxFighters",
        "type": "property"
      },
      {
        "text": "freeSpace",
        "type": "property"
      },
      {
        "text": "occupiedSpace",
        "type": "property"
      },
      {
        "text": "space",
        "type": "property"
      },
      {
        "text": "numFighters",
        "type": "property"
      },
      {
        "text": "numSquads",
        "type": "property"
      }
    ]
  },
  {
    "text": "BspTree",
    "snippet": "BspTree(${1:uuid})${20}",
    "description": "A new instance of BspTree",
    "members": [
      {
        "text": "getBlocksByBox",
        "snippet": "getBlocksByBox(${1:box})${20}"
      },
      {
        "text": "getBlocksBySphere",
        "snippet": "getBlocksBySphere(${1:sphere})${20}"
      },
      {
        "text": "getBlocksByOrientedBox",
        "snippet": "getBlocksByOrientedBox(${1:box}, ${2:boxOrientation})${20}"
      },
      {
        "text": "getBlocksByRay",
        "snippet": "getBlocksByRay(${1:ray}, ${2:float}, ${3:float})${20}"
      },
      {
        "text": "intersectsBox",
        "snippet": "intersectsBox(${1:box}, ${2:exceptionIndex})${20}"
      },
      {
        "text": "intersectsSphere",
        "snippet": "intersectsSphere(${1:sphere}, ${2:exceptionIndex})${20}"
      },
      {
        "text": "intersectRay",
        "snippet": "intersectRay(${1:ray}, ${2:float}, ${3:float})${20}"
      }
    ]
  },
  {
    "text": "DeletionTimer",
    "snippet": "DeletionTimer(${1:uuid})${20}",
    "description": "A new instance of DeletionTimer",
    "members": [
      {
        "text": "disable",
        "snippet": "disable()${1}"
      }
    ],
    "properties": [
      {
        "text": "timeLeft",
        "type": "property"
      }
    ]
  },
  {
    "text": "Engine",
    "snippet": "Engine(${1:uuid})${20}",
    "description": "A new instance of Engine",
    "properties": [
      {
        "text": "requiredEnergy",
        "type": "property"
      },
      {
        "text": "consumerName",
        "type": "property"
      },
      {
        "text": "consumerIcon",
        "type": "property"
      },
      {
        "text": "defaultPriority",
        "type": "property"
      },
      {
        "text": "brakeThrust",
        "type": "property"
      },
      {
        "text": "acceleration",
        "type": "property"
      },
      {
        "text": "maxVelocity",
        "type": "property"
      },
      {
        "text": "boost",
        "type": "property"
      }
    ]
  },
  {
    "text": "Weapons",
    "snippet": "Weapons(${1:uuid})${20}",
    "description": "A new instance of Weapons"
  },
  {
    "text": "FighterAI",
    "snippet": "FighterAI(${1:uuid})${20}",
    "description": "A new instance of FighterAI",
    "properties": [
      {
        "text": "mothership",
        "type": "property"
      },
      {
        "text": "squad",
        "type": "property"
      },
      {
        "text": "orders",
        "type": "property"
      },
      {
        "text": "target",
        "type": "property"
      }
    ]
  },
  {
    "text": "Physics",
    "snippet": "Physics(${1:uuid})${20}",
    "description": "A new instance of Physics",
    "members": [
      {
        "text": "lerpPositions",
        "snippet": "lerpPositions(${1:timeStep})${20}"
      },
      {
        "text": "applyGlobalForce",
        "snippet": "applyGlobalForce(${1:positon}, ${2:direction}, ${3:size}, ${4:time})${20}"
      },
      {
        "text": "applyLocalForce",
        "snippet": "applyLocalForce(${1:positon}, ${2:force}, ${3:size}, ${4:time})${20}"
      },
      {
        "text": "applyImpulse",
        "snippet": "applyImpulse(${1:positon}, ${2:direction}, ${3:size})${20}"
      }
    ],
    "properties": [
      {
        "text": "mass",
        "type": "property"
      },
      {
        "text": "invMass",
        "type": "property"
      },
      {
        "text": "centerOfRotation",
        "type": "property"
      },
      {
        "text": "centerOfMass",
        "type": "property"
      },
      {
        "text": "kineticEnergy",
        "type": "property"
      },
      {
        "text": "rotationalEnergy",
        "type": "property"
      }
    ]
  },
  {
    "text": "Plan",
    "snippet": "Plan(${1:uuid})${20}",
    "description": "A new instance of Plan",
    "members": [
      {
        "text": "set",
        "snippet": "set(${1:blockPlan})${20}"
      },
      {
        "text": "move",
        "snippet": "move(${1:blockPlan})${20}"
      },
      {
        "text": "get",
        "snippet": "get()${1}"
      },
      {
        "text": "heal",
        "snippet": "heal(${1:damage}, ${2:block}, ${3:location}, ${4:inflictingEntity})${20}"
      },
      {
        "text": "damage",
        "snippet": "damage(${1:damage}, ${2:block}, ${3:location}, ${4:inflictingEntity}, ${5:damageType})${20}"
      },
      {
        "text": "destroy",
        "snippet": "destroy(${1:blocks})${20}"
      },
      {
        "text": "addBlock",
        "snippet": "addBlock(${1:position}, ${2:size}, ${3:parentIndex}, ${4:index}, ${5:color}, ${6:material}, ${7:orientation}, ${8:blockIndex})${20}"
      },
      {
        "text": "addPlan",
        "snippet": "addPlan(${1:parentIndex}, ${2:blockPlan}, ${3:otherBlock})${20}"
      },
      {
        "text": "addPlanDisplaced",
        "snippet": "addPlanDisplaced(${1:parentIndex}, ${2:blockPlan}, ${3:otherBlock}, ${4:delta})${20}"
      },
      {
        "text": "removeBlock",
        "snippet": "removeBlock(${1:index})${20}"
      },
      {
        "text": "deleteSubTree",
        "snippet": "deleteSubTree(${1:index})${20}"
      },
      {
        "text": "getRemoved",
        "snippet": "getRemoved(${1:index})${20}"
      },
      {
        "text": "exists",
        "snippet": "exists(${1:index})${20}"
      },
      {
        "text": "empty",
        "snippet": "empty()${1}"
      },
      {
        "text": "setBlockColor",
        "snippet": "setBlockColor(${1:index}, ${2:color})${20}"
      },
      {
        "text": "setBlockType",
        "snippet": "setBlockType(${1:index}, ${2:type})${20}"
      },
      {
        "text": "setMaterial",
        "snippet": "setMaterial(${1:material})${20}"
      },
      {
        "text": "setColor",
        "snippet": "setColor(${1:color})${20}"
      },
      {
        "text": "getBlock",
        "snippet": "getBlock(${1:index})${20}"
      },
      {
        "text": "getNthBlock",
        "snippet": "getNthBlock(${1:int})${20}"
      },
      {
        "text": "getNthIndex",
        "snippet": "getNthIndex(${1:int})${20}"
      },
      {
        "text": "getBlockIndices",
        "snippet": "getBlockIndices()${1}"
      },
      {
        "text": "getMoneyValue",
        "snippet": "getMoneyValue()${1}"
      },
      {
        "text": "getResourceValue",
        "snippet": "getResourceValue()${1}"
      },
      {
        "text": "getUndamagedMoneyValue",
        "snippet": "getUndamagedMoneyValue()${1}"
      },
      {
        "text": "getUndamagedResourceValue",
        "snippet": "getUndamagedResourceValue()${1}"
      }
    ],
    "properties": [
      {
        "text": "root",
        "type": "property"
      },
      {
        "text": "rootIndex",
        "type": "property"
      },
      {
        "text": "numBlocks",
        "type": "property"
      },
      {
        "text": "radius",
        "type": "property"
      },
      {
        "text": "durability",
        "type": "property"
      },
      {
        "text": "volume",
        "type": "property"
      },
      {
        "text": "centerOfMass",
        "type": "property"
      },
      {
        "text": "boundingBox",
        "type": "property"
      },
      {
        "text": "boundingSphere",
        "type": "property"
      },
      {
        "text": "accumulatingHealth",
        "type": "property"
      },
      {
        "text": "convex",
        "type": "property"
      }
    ]
  },
  {
    "text": "ShipAI",
    "snippet": "ShipAI(${1:uuid})${20}",
    "description": "A new instance of ShipAI",
    "members": [
      {
        "text": "registerFriendFaction",
        "snippet": "registerFriendFaction(${1:index})${20}"
      },
      {
        "text": "unregisterFriendFaction",
        "snippet": "unregisterFriendFaction(${1:index})${20}"
      },
      {
        "text": "registerEnemyFaction",
        "snippet": "registerEnemyFaction(${1:index})${20}"
      },
      {
        "text": "unregisterEnemyFaction",
        "snippet": "unregisterEnemyFaction(${1:index})${20}"
      },
      {
        "text": "registerFriendEntity",
        "snippet": "registerFriendEntity(${1:index})${20}"
      },
      {
        "text": "unregisterFriendEntity",
        "snippet": "unregisterFriendEntity(${1:index})${20}"
      },
      {
        "text": "registerEnemyEntity",
        "snippet": "registerEnemyEntity(${1:index})${20}"
      },
      {
        "text": "unregisterEnemyEntity",
        "snippet": "unregisterEnemyEntity(${1:index})${20}"
      },
      {
        "text": "setPassiveShooting",
        "snippet": "setPassiveShooting(${1:in})${20}"
      },
      {
        "text": "setIdle",
        "snippet": "setIdle()${1}"
      },
      {
        "text": "setPassive",
        "snippet": "setPassive()${1}"
      },
      {
        "text": "setAggressive",
        "snippet": "setAggressive()${1}"
      },
      {
        "text": "setFly",
        "snippet": "setFly(${1:location}, ${2:arrivalRadius})${20}"
      },
      {
        "text": "setFlyLinear",
        "snippet": "setFlyLinear(${1:location}, ${2:arrivalRadius})${20}"
      },
      {
        "text": "setGuard",
        "snippet": "setGuard(${1:location})${20}"
      },
      {
        "text": "setFollow",
        "snippet": "setFollow(${1:entity})${20}"
      },
      {
        "text": "setEscort",
        "snippet": "setEscort(${1:entity})${20}"
      },
      {
        "text": "setJump",
        "snippet": "setJump(${1:x}, ${2:y})${20}"
      },
      {
        "text": "setAttack",
        "snippet": "setAttack(${1:entity})${20}"
      },
      {
        "text": "setPatrol",
        "snippet": "setPatrol(${1:waypoints})${20}"
      },
      {
        "text": "getNearestEnemy",
        "snippet": "getNearestEnemy(${1:relationThreshold})${20}"
      },
      {
        "text": "isEnemyPresent",
        "snippet": "isEnemyPresent(${1:relationThreshold})${20}"
      }
    ],
    "properties": [
      {
        "text": "state",
        "type": "property"
      }
    ]
  },
  {
    "text": "Velocity",
    "snippet": "Velocity(${1:uuid})${20}",
    "description": "A new instance of Velocity",
    "members": [
      {
        "text": "addVelocity",
        "snippet": "addVelocity(${1:delta})${20}"
      },
      {
        "text": "addRotation",
        "snippet": "addRotation(${1:axis}, ${2:angle})${20}"
      },
      {
        "text": "setAngularVelocity",
        "snippet": "setAngularVelocity(${1:axis}, ${2:angle})${20}"
      }
    ],
    "properties": [
      {
        "text": "axis",
        "type": "property"
      },
      {
        "text": "rotationSpeed",
        "type": "property"
      },
      {
        "text": "localAngular",
        "type": "property"
      },
      {
        "text": "linear",
        "type": "property"
      },
      {
        "text": "linear2",
        "type": "property"
      },
      {
        "text": "velocityf",
        "type": "property"
      },
      {
        "text": "velocity",
        "type": "property"
      }
    ]
  },
  {
    "text": "InteractionText",
    "snippet": "InteractionText(${1:uuid})${20}",
    "description": "A new instance of InteractionText",
    "properties": [
      {
        "text": "text",
        "type": "property"
      }
    ]
  },
  {
    "text": "EnergySystem",
    "snippet": "EnergySystem(${1:uuid})${20}",
    "description": "A new instance of EnergySystem",
    "members": [
      {
        "text": "addEnergy",
        "snippet": "addEnergy(${1:amount})${20}"
      },
      {
        "text": "removeEnergy",
        "snippet": "removeEnergy(${1:amount})${20}"
      }
    ],
    "properties": [
      {
        "text": "energy",
        "type": "property"
      },
      {
        "text": "capacity",
        "type": "property"
      },
      {
        "text": "productionRate",
        "type": "property"
      },
      {
        "text": "consumableEnergy",
        "type": "property"
      },
      {
        "text": "requiredEnergy",
        "type": "property"
      },
      {
        "text": "rechargeRate",
        "type": "property"
      },
      {
        "text": "superflousEnergy",
        "type": "property"
      }
    ]
  },
  {
    "text": "WormHole",
    "snippet": "WormHole(${1:uuid})${20}",
    "description": "A new instance of WormHole",
    "members": [
      {
        "text": "getTargetCoordinates",
        "snippet": "getTargetCoordinates(${1:x})${20}"
      },
      {
        "text": "setTargetCoordinates",
        "snippet": "setTargetCoordinates(${1:x}, ${2:y})${20}"
      }
    ],
    "properties": [
      {
        "text": "color",
        "type": "property"
      },
      {
        "text": "visualSize",
        "type": "property"
      },
      {
        "text": "passageSize",
        "type": "property"
      },
      {
        "text": "oneWay",
        "type": "property"
      },
      {
        "text": "visible",
        "type": "property"
      },
      {
        "text": "simplifiedVisuals",
        "type": "property"
      }
    ]
  }
]
