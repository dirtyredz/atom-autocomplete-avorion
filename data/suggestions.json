{
  "global": [
    {
      "text": "Sector",
      "snippet": "Sector()",
      "description": "A new instance of Sector",
      "members": [
        {
          "text": "createStation",
          "snippet": "createStation()",
          "svc": "Server",
          "description": "Convenience function to create a station"
        },
        {
          "text": "createShip",
          "snippet": "createShip()",
          "svc": "Server",
          "description": "Convenience function to create a ship"
        },
        {
          "text": "createAsteroid",
          "snippet": "createAsteroid()",
          "svc": "Server",
          "description": "Convenience function to create an asteroid"
        },
        {
          "text": "createWreckage",
          "snippet": "createWreckage()",
          "svc": "Server",
          "description": "Convenience function to create a wreckage"
        },
        {
          "text": "createObject",
          "snippet": "createObject()",
          "svc": "Server",
          "description": "Convenience function to create a default object"
        },
        {
          "text": "createWormHole",
          "snippet": "createWormHole()",
          "svc": "Server",
          "description": "Convenience function to create a wormhole"
        },
        {
          "text": "createEntity",
          "snippet": "createEntity()",
          "svc": "Server",
          "description": "Creates a new arbitrary entity in the sector"
        },
        {
          "text": "resendEntity",
          "snippet": "resendEntity()",
          "svc": "Server",
          "description": ""
        },
        {
          "text": "dropBundle",
          "snippet": "dropBundle()",
          "svc": "Server",
          "description": ""
        },
        {
          "text": "dropMoney",
          "snippet": "dropMoney()",
          "svc": "Server",
          "description": ""
        },
        {
          "text": "dropResources",
          "snippet": "dropResources()",
          "svc": "Server",
          "description": "Convenience function to create a wormhole"
        },
        {
          "text": "dropCargo",
          "snippet": "dropCargo()",
          "svc": "Server",
          "description": "Convenience function to create a wormhole"
        },
        {
          "text": "dropColor",
          "snippet": "dropColor()",
          "svc": "Server",
          "description": "Convenience function to create a wormhole"
        },
        {
          "text": "dropRandomColor",
          "snippet": "dropRandomColor()",
          "svc": "Server",
          "description": "Convenience function to create a wormhole"
        },
        {
          "text": "dropTurret",
          "snippet": "dropTurret()",
          "svc": "Server",
          "description": "Convenience function to create a wormhole"
        },
        {
          "text": "dropSectorTurret",
          "snippet": "dropSectorTurret()",
          "svc": "Server",
          "description": "Convenience function to create a wormhole"
        },
        {
          "text": "dropUpgrade",
          "snippet": "dropUpgrade()",
          "svc": "Server",
          "description": "Convenience function to create a wormhole"
        },
        {
          "text": "deleteEntity",
          "snippet": "deleteEntity()",
          "svc": "Server",
          "description": "Sets an entity for deletion"
        },
        {
          "text": "deleteEntityJumped",
          "snippet": "deleteEntityJumped()",
          "svc": "Server",
          "description": "Sets an entity for deletion"
        },
        {
          "text": "collectGarbage",
          "snippet": "collectGarbage()",
          "svc": "Server",
          "description": "Immediately deletes all entities in the sector that are set for deletion"
        },
        {
          "text": "resolveScriptPath",
          "snippet": "resolveScriptPath()",
          "svc": "Server",
          "description": ""
        },
        {
          "text": "invokeFunction",
          "snippet": "invokeFunction()",
          "svc": "Server",
          "description": ""
        },
        {
          "text": "addScript",
          "snippet": "addScript()",
          "svc": "Server",
          "description": ""
        },
        {
          "text": "removeScript",
          "snippet": "removeScript()",
          "svc": "Server",
          "description": ""
        },
        {
          "text": "hasScript",
          "snippet": "hasScript()",
          "svc": "Server",
          "description": ""
        },
        {
          "text": "getScripts",
          "snippet": "getScripts()",
          "svc": "Server",
          "description": ""
        },
        {
          "text": "hasEnemies",
          "snippet": "hasEnemies()",
          "svc": "Server",
          "description": "Checks if the given faction has any enemy ships or objects in the sector"
        },
        {
          "text": "getPresentFactions",
          "snippet": "getPresentFactions()",
          "svc": "Server",
          "description": "Returns all indices of all present factions"
        },
        {
          "text": "registerCallback",
          "snippet": "registerCallback()",
          "description": "Register a callback in the sector"
        },
        {
          "text": "unregisterCallback",
          "snippet": "unregisterCallback()",
          "description": ""
        },
        {
          "text": "getCoordinates",
          "snippet": "getCoordinates()",
          "description": "Access the x, y coordinates of the sector"
        },
        {
          "text": "getEntity",
          "snippet": "getEntity()",
          "description": "Find an entity by index in the sector"
        },
        {
          "text": "getEntityByFactionAndName",
          "snippet": "getEntityByFactionAndName()",
          "description": ""
        },
        {
          "text": "getEnemies",
          "snippet": "getEnemies()",
          "svc": "Server",
          "description": "Returns all enemies of the given faction in the sector"
        },
        {
          "text": "getEntities",
          "snippet": "getEntities()",
          "description": "Returns all entities in the sector"
        },
        {
          "text": "getEntitiesByType",
          "snippet": "getEntitiesByType()",
          "description": "Returns all entities in the sector that have a specific type"
        },
        {
          "text": "getEntitiesByScript",
          "snippet": "getEntitiesByScript()",
          "svc": "Server",
          "description": "Returns all entities in the sector that have a specific script attached to them"
        },
        {
          "text": "getEntitiesByComponent",
          "snippet": "getEntitiesByComponent()",
          "description": "Returns all entities in the sector that have a specific component"
        },
        {
          "text": "getEntitiesByComponents",
          "snippet": "getEntitiesByComponents()",
          "description": "Returns all entities in the sector that have a specific set of components"
        },
        {
          "text": "getEntitiesByLocation",
          "snippet": "getEntitiesByLocation()",
          "description": "Returns all entities in the sector whose bounding spheres intersect with the given sphere"
        },
        {
          "text": "getEntitiesByFaction",
          "snippet": "getEntitiesByFaction()",
          "description": "Returns all entities in the sector that belong to the given faction"
        },
        {
          "text": "getPlayers",
          "snippet": "getPlayers()",
          "svc": "Server",
          "description": "Returns all players that are currently in the sector"
        },
        {
          "text": "broadcastChatMessage",
          "snippet": "broadcastChatMessage()",
          "svc": "Server",
          "description": "Broadcast a chat message to all players that are currently in the sector"
        },
        {
          "text": "getValue",
          "snippet": "getValue()",
          "svc": "Server",
          "description": "Retrieves a custom value saved in the entity with the given key"
        },
        {
          "text": "getValues",
          "snippet": "getValues()",
          "svc": "Server",
          "description": "Retrieves all key-value pairs of custom values of the entity"
        },
        {
          "text": "setValue",
          "snippet": "setValue()",
          "svc": "Server",
          "description": "Sets a custom value"
        },
        {
          "text": "createGlow",
          "snippet": "createGlow(${1:pos}, ${2:size}, ${3:color})",
          "svc": "Client",
          "description": ""
        },
        {
          "text": "createSpark",
          "snippet": "createSpark()",
          "svc": "Client",
          "description": ""
        },
        {
          "text": "createExplosion",
          "snippet": "createExplosion()",
          "svc": "Client",
          "description": ""
        },
        {
          "text": "createDustExplosion",
          "snippet": "createDustExplosion()",
          "svc": "Client",
          "description": ""
        },
        {
          "text": "createDust",
          "snippet": "createDust()",
          "svc": "Client",
          "description": ""
        },
        {
          "text": "createHyperspaceAnimation",
          "snippet": "createHyperspaceAnimation()",
          "svc": "Client",
          "description": ""
        },
        {
          "text": "createLaser",
          "snippet": "createLaser()",
          "svc": "Client",
          "description": ""
        },
        {
          "text": "setValue",
          "snippet": "setValue()",
          "svc": "Client",
          "description": ""
        },
        {
          "text": "setValue",
          "snippet": "setValue()",
          "svc": "Client",
          "description": ""
        },
        {
          "text": "setValue",
          "snippet": "setValue()",
          "svc": "Client",
          "description": ""
        }
      ]
    },
    {
      "text": "Player",
      "snippet": "Player()",
      "description": "A new instance of Player"
    },
    {
      "text": "Tooltip",
      "snippet": "Tooltip()",
      "description": "A new instance of Tooltip"
    },
    {
      "text": "TooltipLine",
      "snippet": "TooltipLine(${1:int}, ${2:int})",
      "description": "A new instance of TooltipLine"
    },
    {
      "text": "Server",
      "snippet": "Server()",
      "svc": "Server",
      "description": "A new instance of Server"
    },
    {
      "text": "Galaxy",
      "snippet": "Galaxy()",
      "description": "A new instance of Galaxy"
    },
    {
      "text": "Alliance",
      "snippet": "Alliance()",
      "description": "A new instance of Alliance"
    },
    {
      "text": "Faction",
      "snippet": "Faction()",
      "description": "A new instance of Faction"
    },
    {
      "text": "Line",
      "snippet": "Line(${1:index})",
      "svc": "Client",
      "description": "A new instance of Line"
    },
    {
      "text": "UIOrganizer",
      "snippet": "UIOrganizer(${1:a}, ${2:b})",
      "svc": "Client",
      "description": "Expects either a Rect specifying the rect of this UI organizer for parameter a and nil for b, or a vec2 for a and a vec2 for b, specifying the lower and upper bounds for the UI organizer rect."
    },
    {
      "text": "UIVerticalLister",
      "snippet": "UIVerticalLister(${1:rect}, ${2:padding}, ${1:margin})",
      "svc": "Client",
      "description": "This class gets a rect and aligns given elements in a list style inside the rect."
    },
    {
      "text": "UIHorizontalSplitter",
      "snippet": "UIHorizontalSplitter(${1:rect}, ${2:padding}, ${1:margin}, ${1:ratio})",
      "svc": "Client",
      "description": "This class gets a rect and creates two new rects by splitting the given rect horizontally."
    },
    {
      "text": "UIVerticalSplitter",
      "snippet": "UIVerticalSplitter(${1:rect}, ${2:padding}, ${1:margin}, ${1:ratio})",
      "svc": "Client",
      "description": "This class gets a rect and creates two new rects by splitting the given rect vertically."
    },
    {
      "text": "UIHorizontalMultiSplitter",
      "snippet": "UIHorizontalMultiSplitter(${1:rect}, ${2:padding}, ${1:margin}, ${1:splits})",
      "svc": "Client",
      "description": "This class gets a rect and creates multiple new rects by evenly splitting the given rect horizontally n times, creating n + 1 new rects."
    },
    {
      "text": "UIVerticalMultiSplitter",
      "snippet": "UIVerticalMultiSplitter(${1:rect}, ${2:padding}, ${1:margin}, ${1:splits})",
      "svc": "Client",
      "description": "This class gets a rect and creates multiple new rects by evenly splitting the given rect vertically n times, creating n + 1 new rects."
    },
    {
      "text": "UIArbitraryVerticalSplitter",
      "snippet": "UIArbitraryVerticalSplitter(${1:rect}, ${2:padding}, ${1:margin}, ${1:splits})",
      "svc": "Client",
      "description": "This class gets a rect and creates multiple new rects by arbitrarily splitting the given rect vertically n times, creating n + 1 new rects."
    },
    {
      "text": "Tab",
      "snippet": "Tab(${1:index})",
      "svc": "Client",
      "description": "A new instance of Tab"
    },
    {
      "text": "TabbedWindow",
      "snippet": "TabbedWindow(${1:index})",
      "svc": "Client",
      "description": "A new instance of TabbedWindow"
    },
    {
      "text": "StatisticsBar",
      "snippet": "StatisticsBar(${1:index})",
      "svc": "Client",
      "description": "A new instance of StatisticsBar"
    },
    {
      "text": "ComboBox",
      "snippet": "ComboBox(${1:index})",
      "svc": "Client",
      "description": "A new instance of ComboBox"
    },
    {
      "text": "MultiLineTextBox",
      "snippet": "MultiLineTextBox(${1:index})",
      "svc": "Client",
      "description": "A new instance of MultiLineTextBox"
    },
    {
      "text": "InventorySelection",
      "snippet": "InventorySelection(${1:index})",
      "svc": "Client",
      "description": "A new instance of InventorySelection"
    },
    {
      "text": "UIElement",
      "snippet": "UIElement()",
      "svc": "Client",
      "description": "A new instance of UIElement"
    },
    {
      "text": "PlanDisplayer",
      "snippet": "PlanDisplayer(${1:index})",
      "svc": "Client",
      "description": "A new instance of PlanDisplayer"
    },
    {
      "text": "ListBoxEx",
      "snippet": "ListBoxEx(${1:index})",
      "svc": "Client",
      "description": "A new instance of ListBoxEx"
    },
    {
      "text": "ListBox",
      "snippet": "ListBox(${1:index})",
      "svc": "Client",
      "description": "A new instance of ListBox"
    },
    {
      "text": "Window",
      "snippet": "Window(${1:index})",
      "svc": "Client",
      "description": "A new instance of Window"
    },
    {
      "text": "ScrollFrame",
      "snippet": "ScrollFrame(${1:index})",
      "svc": "Client",
      "description": "A new instance of ScrollFrame"
    },
    {
      "text": "InventorySelectionItem",
      "snippet": "InventorySelectionItem()",
      "svc": "Client",
      "description": "A new instance of InventorySelectionItem"
    },
    {
      "text": "Slider",
      "snippet": "Slider(${1:index})",
      "svc": "Client",
      "description": "A new instance of Slider"
    },
    {
      "text": "TooltipRenderer",
      "snippet": "TooltipRenderer()",
      "svc": "Client",
      "description": "A new instance of TooltipRenderer"
    },
    {
      "text": "InputWindow",
      "snippet": "InputWindow(${1:index})",
      "svc": "Client",
      "description": "A new instance of InputWindow"
    },
    {
      "text": "Frame",
      "snippet": "Frame(${1:index})",
      "svc": "Client",
      "description": "A new instance of Frame"
    },
    {
      "text": "TextBox",
      "snippet": "TextBox(${1:index})",
      "svc": "Client",
      "description": "A new instance of TextBox"
    },
    {
      "text": "PlanSelectionItem",
      "snippet": "PlanSelectionItem()",
      "svc": "Client",
      "description": "A new instance of PlanSelectionItem"
    },
    {
      "text": "SelectionItem",
      "snippet": "SelectionItem()",
      "svc": "Client",
      "description": "A new instance of SelectionItem"
    },
    {
      "text": "Selection",
      "snippet": "Selection(${1:index})",
      "svc": "Client",
      "description": "A new instance of Selection"
    },
    {
      "text": "CheckBox",
      "snippet": "CheckBox(${1:index})",
      "svc": "Client",
      "description": "A new instance of CheckBox"
    },
    {
      "text": "Label",
      "snippet": "Label(${1:index})",
      "svc": "Client",
      "description": "A new instance of Label"
    },
    {
      "text": "TextField",
      "snippet": "TextField(${1:index})",
      "svc": "Client",
      "description": "A new instance of TextField"
    },
    {
      "text": "Button",
      "snippet": "Button(${1:index})",
      "svc": "Client",
      "description": "A new instance of Button"
    },
    {
      "text": "InventoryReferenceSelectionItem",
      "snippet": "InventoryReferenceSelectionItem()",
      "svc": "Client",
      "description": "A new instance of InventoryReferenceSelectionItem"
    },
    {
      "text": "Picture",
      "snippet": "Picture(${1:index})",
      "svc": "Client",
      "description": "A new instance of Picture"
    },
    {
      "text": "UIRenderer",
      "snippet": "UIRenderer()",
      "svc": "Client",
      "description": "A new instance of UIRenderer"
    },
    {
      "text": "NumbersBar",
      "snippet": "NumbersBar(${1:index})",
      "svc": "Client",
      "description": "A new instance of NumbersBar"
    },
    {
      "text": "UIContainer",
      "snippet": "UIContainer(${1:index})",
      "svc": "Client",
      "description": "A new instance of UIContainer"
    },
    {
      "text": "Planet",
      "snippet": "Planet()",
      "svc": "Client",
      "description": "A new instance of Planet"
    },
    {
      "text": "Achievements",
      "snippet": "Achievements()",
      "svc": "Client",
      "description": "A new instance of Achievements"
    },
    {
      "text": "GalaxyMap",
      "snippet": "GalaxyMap()",
      "svc": "Client",
      "description": "A new instance of GalaxyMap"
    },
    {
      "text": "Mouse",
      "snippet": "Mouse()",
      "svc": "Client",
      "description": "A new instance of Mouse"
    },
    {
      "text": "Keyboard",
      "snippet": "Keyboard()",
      "svc": "Client",
      "description": "A new instance of Keyboard"
    },
    {
      "text": "LaserFX",
      "snippet": "LaserFX()",
      "svc": "Client",
      "description": "A new instance of LaserFX"
    },
    {
      "text": "QuadTree",
      "snippet": "QuadTree()",
      "description": "A new instance of QuadTree"
    },
    {
      "text": "Uuid",
      "snippet": "Uuid(${1:uuid})",
      "description": "A new instance of Uuid"
    },
    {
      "text": "Timer",
      "snippet": "Timer()",
      "description": "A new instance of Timer"
    },
    {
      "text": "Profiler",
      "snippet": "Profiler(${1:str})",
      "description": "A new instance of Profiler"
    },
    {
      "text": "Ray",
      "snippet": "Ray()",
      "description": "A new instance of Ray"
    },
    {
      "text": "Color",
      "snippet": "Color()",
      "description": "A new instance of Color"
    },
    {
      "text": "Box",
      "snippet": "Box()",
      "description": "A new instance of Box"
    },
    {
      "text": "vec3",
      "snippet": "vec3(${1:float}, ${2:float}, ${3:float})",
      "description": "A new instance of vec3"
    },
    {
      "text": "vec4",
      "snippet": "vec4(${1:float}, ${2:float}, ${3:float}, ${4:float})",
      "description": "A new instance of vec4"
    },
    {
      "text": "dvec2",
      "snippet": "dvec2(${1:double}, ${2:double})",
      "description": "A new instance of dvec2"
    },
    {
      "text": "dvec3",
      "snippet": "dvec3(${1:double}, ${2:double}, ${3:double})",
      "description": "A new instance of dvec3"
    },
    {
      "text": "dvec4",
      "snippet": "dvec4(${1:double}, ${2:double}, ${3:double}, ${4:double})",
      "description": "A new instance of dvec4"
    },
    {
      "text": "ivec2",
      "snippet": "ivec2(${1:int}, ${2:int})",
      "description": "A new instance of ivec2"
    },
    {
      "text": "ivec3",
      "snippet": "ivec3(${1:int}, ${2:int}, ${3:int})",
      "description": "A new instance of ivec3"
    },
    {
      "text": "ivec4",
      "snippet": "ivec4(${1:int}, ${2:int}, ${3:int}, ${4:int})",
      "description": "A new instance of ivec4"
    },
    {
      "text": "Rect",
      "snippet": "Rect(${1:a}, ${2:b}, ${3:a}, ${4:b})",
      "description": "A new instance of Rect"
    },
    {
      "text": "Matrix",
      "snippet": "Matrix()",
      "description": "A new instance of Matrix"
    },
    {
      "text": "Sphere",
      "snippet": "Sphere(${1:vec3}, ${2:float})",
      "description": "A new instance of Sphere"
    },
    {
      "text": "Seed",
      "snippet": "Seed(${1:in})",
      "description": "A new instance of Seed"
    },
    {
      "text": "Random",
      "snippet": "Random(${1:seed})",
      "description": "A new instance of Random"
    },
    {
      "text": "FighterTemplate",
      "snippet": "FighterTemplate()",
      "description": "A new instance of FighterTemplate"
    },
    {
      "text": "VanillaInventoryItem",
      "snippet": "VanillaInventoryItem()",
      "description": "A new instance of VanillaInventoryItem"
    },
    {
      "text": "Rarity",
      "snippet": "Rarity(${1:int})",
      "description": "A new instance of Rarity"
    },
    {
      "text": "PlanetSpecifics",
      "snippet": "PlanetSpecifics()",
      "description": "A new instance of PlanetSpecifics"
    },
    {
      "text": "CraftStyle",
      "snippet": "CraftStyle()",
      "description": "A new instance of CraftStyle"
    },
    {
      "text": "BlockPlanBlock",
      "snippet": "BlockPlanBlock()",
      "description": "A new instance of BlockPlanBlock"
    },
    {
      "text": "BlockPlan",
      "snippet": "BlockPlan()",
      "description": "A new instance of BlockPlan"
    },
    {
      "text": "EntityDescriptor",
      "snippet": "EntityDescriptor()",
      "description": "A new instance of EntityDescriptor"
    },
    {
      "text": "Language",
      "snippet": "Language(${1:seed})",
      "description": "A new instance of Language"
    },
    {
      "text": "Inventory",
      "snippet": "Inventory()",
      "description": "A new instance of Inventory"
    },
    {
      "text": "PlanBspTree",
      "snippet": "PlanBspTree(${1:plan})",
      "description": "A new instance of PlanBspTree"
    },
    {
      "text": "Weapon",
      "snippet": "Weapon()",
      "description": "A new instance of Weapon"
    },
    {
      "text": "Crew",
      "snippet": "Crew()",
      "description": "A new instance of Crew"
    },
    {
      "text": "CrewProfession",
      "snippet": "CrewProfession(${1:int})",
      "description": "A new instance of CrewProfession"
    },
    {
      "text": "CrewMan",
      "snippet": "CrewMan(${1:profession}, ${2:specialist}, ${3:level})",
      "description": "A new instance of CrewMan"
    },
    {
      "text": "TurretTemplate",
      "snippet": "TurretTemplate()",
      "description": "A new instance of TurretTemplate"
    },
    {
      "text": "InventoryTurret",
      "snippet": "InventoryTurret()",
      "description": "A new instance of InventoryTurret"
    },
    {
      "text": "AllianceRank",
      "snippet": "AllianceRank()",
      "description": "A new instance of AllianceRank"
    },
    {
      "text": "TradingGood",
      "snippet": "TradingGood(${1:string}, ${2:string}, ${3:string}, ${4:string}, ${5:float}, ${6:float})",
      "description": "A new instance of TradingGood"
    },
    {
      "text": "AllianceMember",
      "snippet": "AllianceMember()",
      "description": "A new instance of AllianceMember"
    },
    {
      "text": "Entity",
      "snippet": "Entity(${1:index})",
      "description": "A new instance of Entity"
    },
    {
      "text": "Mail",
      "snippet": "Mail()",
      "description": "A new instance of Mail"
    },
    {
      "text": "Material",
      "snippet": "Material(${1:int})",
      "description": "A new instance of Material"
    },
    {
      "text": "SystemUpgradeTemplate",
      "snippet": "SystemUpgradeTemplate(${1:script}, ${1:rarity}, ${1:seed})",
      "description": "A new instance of SystemUpgradeTemplate"
    },
    {
      "text": "PlayerId",
      "snippet": "PlayerId()",
      "description": "A new instance of PlayerId"
    },
    {
      "text": "WreckageCreator",
      "snippet": "WreckageCreator(${1:uuid})",
      "description": "A new instance of WreckageCreator"
    },
    {
      "text": "EntityTransferrer",
      "snippet": "EntityTransferrer(${1:uuid})",
      "description": "A new instance of EntityTransferrer"
    },
    {
      "text": "FighterController",
      "snippet": "FighterController(${1:uuid})",
      "description": "A new instance of FighterController"
    },
    {
      "text": "Loot",
      "snippet": "Loot(${1:uuid})",
      "description": "A new instance of Loot"
    },
    {
      "text": "EntityIcon",
      "snippet": "EntityIcon(${1:uuid})",
      "description": "A new instance of EntityIcon"
    },
    {
      "text": "EntityTooltip",
      "snippet": "EntityTooltip(${1:uuid})",
      "description": "A new instance of EntityTooltip"
    },
    {
      "text": "ScriptUI",
      "snippet": "ScriptUI(${1:uuid})",
      "description": "A new instance of ScriptUI"
    },
    {
      "text": "Hangar",
      "snippet": "Hangar(${1:uuid})",
      "description": "A new instance of Hangar"
    },
    {
      "text": "BspTree",
      "snippet": "BspTree(${1:uuid})",
      "description": "A new instance of BspTree"
    },
    {
      "text": "DeletionTimer",
      "snippet": "DeletionTimer(${1:uuid})",
      "description": "A new instance of DeletionTimer"
    },
    {
      "text": "Engine",
      "snippet": "Engine(${1:uuid})",
      "description": "A new instance of Engine"
    },
    {
      "text": "Weapons",
      "snippet": "Weapons(${1:uuid})",
      "description": "A new instance of Weapons"
    },
    {
      "text": "FighterAI",
      "snippet": "FighterAI(${1:uuid})",
      "description": "A new instance of FighterAI"
    },
    {
      "text": "Physics",
      "snippet": "Physics(${1:uuid})",
      "description": "A new instance of Physics"
    },
    {
      "text": "Plan",
      "snippet": "Plan(${1:uuid})",
      "description": "A new instance of Plan"
    },
    {
      "text": "ShipAI",
      "snippet": "ShipAI(${1:uuid})",
      "description": "A new instance of ShipAI"
    },
    {
      "text": "Velocity",
      "snippet": "Velocity(${1:uuid})",
      "description": "A new instance of Velocity"
    },
    {
      "text": "InteractionText",
      "snippet": "InteractionText(${1:uuid})",
      "description": "A new instance of InteractionText"
    },
    {
      "text": "EnergySystem",
      "snippet": "EnergySystem(${1:uuid})",
      "description": "A new instance of EnergySystem"
    },
    {
      "text": "WormHole",
      "snippet": "WormHole(${1:uuid})",
      "description": "A new instance of WormHole"
    },
    {
      "text": "onServer",
      "snippet": "onServer()",
      "description": "A function to find out in a script, whether it's currently executed on the server."
    },
    {
      "text": "onClient",
      "snippet": "onClient()",
      "description": "A function to find out in a script, whether it's currently executed on the client."
    },
    {
      "text": "invokeClientFunction",
      "snippet": "invokeClientFunction(${1:playerIndex}, ${2:functionName}, ${3:arguments})",
      "svc": "Server"
    },
    {
      "text": "broadcastInvokeClientFunction",
      "snippet": "broadcastInvokeClientFunction(${1:functionName}, ${2:arguments})",
      "svc": "Server"
    },
    {
      "text": "async",
      "snippet": "async(${1:callbackFunction}, ${2:code}, ${3:arguments})",
      "description": "Starts an async call that will be executed in a separate thread. Once finished, the given callback function will be called with the values returned by the run() function, which is required to be in the code to run. During the running of this function, only players and factions can be accessed, other objects like sector and entities can't be accessed."
    },
    {
      "text": "getWorkshopShips",
      "snippet": "getWorkshopShips()",
      "svc": "Client"
    },
    {
      "text": "playSound",
      "snippet": "playSound(${1:soundName}, ${1:type}, ${2:volume})",
      "svc": "Client"
    },
    {
      "text": "play3DSound",
      "snippet": "play3DSound(${1:soundName}, ${2:type}, ${3:position}, ${4:radius}, ${5:volume}, ${6:[entity]})",
      "svc": "Client"
    },
    {
      "text": "displayMissionAccomplishedText",
      "snippet": "displayMissionAccomplishedText(${1:bigText}, ${2:smallText})",
      "svc": "Client"
    },
    {
      "text": "registerBoss",
      "snippet": "registerBoss(${1:index}, ${2:healthColor}, ${3:shielColor})",
      "svc": "Client"
    },
    {
      "text": "unregisterBoss",
      "snippet": "unregisterBoss(${1:index})",
      "svc": "Client"
    },
    {
      "text": "setBossHealth",
      "snippet": "setBossHealth(${1:index}, ${2:health}, ${3:maxHealth}, ${4:shield}, ${1:maxShield})",
      "svc": "Client"
    },
    {
      "text": "setBossHealthColor",
      "snippet": "setBossHealthColor(${1:index}, ${2:health}, ${3:shield})",
      "svc": "Client"
    },
    {
      "text": "displayChatMessage",
      "snippet": "displayChatMessage(${1:message}, ${2:sender}, ${3:type})",
      "svc": "Client",
      "description": "This function displays a chat message on the Chat window of the client."
    },
    {
      "text": "invokeServerFunction",
      "snippet": "invokeServerFunction(${1:functionName}, ${2:arguments})",
      "svc": "Client",
      "description": "Invokes a function on the remote server, in the server instance of the caller script. Example usage would be a server Resource Trader calling the getData() function of its server instance. Return values of the remotely executed functions are not retrieved. On the server side, a variable called callingPlayer will be created or set before executing the called function. callingPlayer contains the index of the calling player. Use this variable to verify that the calling player is actually the player you'd expect. After the call finishes on the server, callingPlayer is set to nil."
    },
    {
      "text": "copy",
      "snippet": "copy(${1:value})",
      "description": "Copies the given Object"
    },
    {
      "text": "valid",
      "snippet": "valid(${1:value})",
      "description": "Checks if the given object is valid. Some objects can become invalid, for example when an entity is deleted the instances of the Entity in the scripts will become invalid."
    },
    {
      "text": "terminate",
      "snippet": "terminate()",
      "description": "Terminates the script. This function returns normally and the current function will run until finished, but no more following calls will be made to the script. The script will be removed from the entity on the next occasion."
    },
    {
      "text": "getReadableValue",
      "snippet": "getReadableValue(${1:number})",
      "description": "Rounds a large number and adds a suffix such as k or M. For example, 10.000 will become 10k."
    },
    {
      "text": "deferredCallback",
      "snippet": "deferredCallback(${1:time}, ${2:function}, ${3:args})",
      "description": "Registers a deferred callback in the script. The given function will be executed after the given time. Depending on the tick rate of the simulation, the callback might get called slightly later than the given time. The callback will never happen before the given time hasn't passed."
    },
    {
      "text": "systemTimeMs",
      "snippet": "systemTimeMs()",
      "description": "The system time in milliseconds"
    },
    {
      "text": "systemTime",
      "snippet": "systemTime()",
      "description": "Returns the system time in seconds. Since lua doesn't support clocks that are accurate down to milliseconds."
    },
    {
      "text": "appTimeMs",
      "snippet": "appTimeMs()",
      "description": "Returns the system time in seconds. Since lua doesn't support clocks that are accurate down to milliseconds."
    },
    {
      "text": "appTime",
      "snippet": "appTime()",
      "description": "Returns the system time in seconds. Since lua doesn't support clocks that are accurate down to milliseconds."
    },
    {
      "text": "getGlobal",
      "snippet": "getGlobal(${1:name})",
      "description": "Retrieves a global variable. These variables are shared over the entire process."
    },
    {
      "text": "setGlobal",
      "snippet": "setGlobal(${1:name}, ${2:value})",
      "description": "Sets a global variable. These variables are shared over the entire process."
    },
    {
      "text": "print",
      "snippet": "print(${1:args})",
      "description": "Prints to the console. In the ingame console, server output will be printed in cyan, client output will be printed in white."
    },
    {
      "text": "printlog",
      "snippet": "printlog(${1:args})",
      "description": "Similar to print, but prints to the log file."
    },
    {
      "text": "writeTrace",
      "snippet": "writeTrace(${1:args})",
      "description": "Similar to print, but prints to the user trace stream. This trace stream can be enabled by passing -t user to the command line arguments of client or server."
    },
    {
      "text": "createMonetaryString",
      "snippet": "createMonetaryString(${1:number})",
      "description": "Inserts dots into a large number to create an easily human readable money string. Example: 10000000 will become 10.000.000"
    },
    {
      "text": "getParentFaction",
      "snippet": "getParentFaction()"
    },
    {
      "text": "getPlayerCraft",
      "snippet": "getPlayerCraft()",
      "svc": "Client"
    },
    {
      "text": "drawText",
      "snippet": "drawText(${1:text}, ${2:px}, ${3:py}, ${4:color}, ${5:size}, ${6:bold}, ${7:italic}, ${8:style})",
      "svc": "Client",
      "description": "Draw text. This function should only be called in valid rendering steps. This function is expensive, don't overuse it."
    },
    {
      "text": "drawTextRect",
      "snippet": "drawTextRect(${1:text}, ${2:rect}, ${3:horizontalAlignment}, ${4:verticalAlignment}, ${5:color}, ${6:size}, ${7:int bold}, ${8:italic}, ${9:style})",
      "svc": "Client",
      "description": "Draw text inside a rect. This function should only be called in valid rendering steps. This function is expensive, don't overuse it."
    },
    {
      "text": "drawRect",
      "snippet": "drawRect(${1:rect}, ${2:color})",
      "svc": "Client",
      "description": "Draw a rect. This function should only be called in valid rendering steps. This function is expensive, don't overuse it."
    },
    {
      "text": "drawBorder",
      "snippet": "drawBorder(${1:rect}, ${2:color})",
      "svc": "Client",
      "description": "Draw a border. This function should only be called in valid rendering steps. This function is expensive, don't overuse it."
    },
    {
      "text": "drawTurretTooltip",
      "snippet": "drawTurretTooltip(${1:turret})",
      "svc": "Client"
    },
    {
      "text": "drawFighterTooltip",
      "snippet": "drawFighterTooltip(${1:fighter})",
      "svc": "Client"
    },
    {
      "text": "drawDebugSphere",
      "snippet": "drawDebugSphere(${1:sphere}, ${2:color})",
      "svc": "Client"
    },
    {
      "text": "drawDebugBox",
      "snippet": "drawDebugBox(${1:box}, ${2:matrix}, ${3:color})",
      "svc": "Client"
    },
    {
      "text": "drawDebugLine",
      "snippet": "drawDebugLine(${1:vec3}, ${2:vec3}, ${3:color})",
      "svc": "Client"
    },
    {
      "text": "projectPoint",
      "snippet": "projectPoint(${1:vec3})",
      "svc": "Client"
    },
    {
      "text": "getResolution",
      "snippet": "getResolution()",
      "svc": "Client"
    },
    {
      "text": "GetLocalizedString",
      "snippet": "GetLocalizedString(${1:string})"
    },
    {
      "text": "ColorHSV",
      "snippet": "ColorHSV(${1:float}, ${2:float}, ${3:float})"
    },
    {
      "text": "ColorARGB",
      "snippet": "ColorARGB(${1:float}, ${2:float}, ${3:float}, ${4:float})"
    },
    {
      "text": "ColorRGB",
      "snippet": "ColorRGB(${1:float}, ${2:float}, ${3:float})"
    },
    {
      "text": "ColorInt",
      "snippet": "ColorInt(${1:int})"
    },
    {
      "text": "dot",
      "snippet": "dot(${1:a}, ${2:b})",
      "description": "Calculates the dot product between 2 vectors. The vectors must have the same type."
    },
    {
      "text": "cross",
      "snippet": "cross(${1:a}, ${2:b})",
      "description": "Calculates the dot product between two vec3s. The vectors must have the same underlying type (double or float)."
    },
    {
      "text": "normalize",
      "snippet": "normalize(${1:vec})",
      "description": "Normalizes a given vector. This function creates a new normalized vector, the given vector is not changed."
    },
    {
      "text": "normalize_ip",
      "snippet": "normalize_ip(${1:vec})",
      "description": "Normalizes a given vector. This function normalizes the vector in place."
    },
    {
      "text": "length",
      "snippet": "length(${1:vec})",
      "description": "Calculates the length of a vector"
    },
    {
      "text": "length2",
      "snippet": "length2(${1:vec})",
      "description": "Calculates the squared length of a vector"
    },
    {
      "text": "distance",
      "snippet": "distance(${1:a}, ${1:b})",
      "description": "Calculates the linear distance between two vectors. The vectors must have the same type."
    },
    {
      "text": "distance2",
      "snippet": "distance2(${1:a}, ${1:b})",
      "description": "Calculates the squared linear distance between two vectors. The vectors must have the same type."
    },
    {
      "text": "MatrixLookUp",
      "snippet": "MatrixLookUp(${1:look}, ${2:up})"
    },
    {
      "text": "MatrixLookUpRight",
      "snippet": "MatrixLookUpRight(${1:look}, ${2:up}, ${3:right})"
    },
    {
      "text": "MatrixLookUpPosition",
      "snippet": "MatrixLookUpPosition(${1:look}, ${2:up}, ${3:pos})"
    },
    {
      "text": "translate",
      "snippet": "translate(${1:matrix}, ${2:pos})"
    },
    {
      "text": "scale",
      "snippet": "scale(${1:matrix}, ${2:size})"
    },
    {
      "text": "rotate",
      "snippet": "rotate(${1:matrix}, ${2:angle}, ${3:acis})"
    },
    {
      "text": "lookAt",
      "snippet": "lookAt(${1:eye}, ${2:at}, ${3:up})"
    },
    {
      "text": "perspective",
      "snippet": "perspective(${1:fov}, ${2:aspect}, ${3:nearClip}, ${4:farClip})"
    },
    {
      "text": "SeedStr",
      "snippet": "SeedStr(${1:string})"
    },
    {
      "text": "makeFastHash",
      "snippet": "makeFastHash(${1:x}, ${2:y}, ${3:seed})"
    },
    {
      "text": "makeHash",
      "snippet": "makeHash(${1:values...})"
    },
    {
      "text": "makeHash64",
      "snippet": "makeHash64(${1:values...})"
    },
    {
      "text": "GenerateFighterTemplate",
      "snippet": "GenerateFighterTemplate(${1:seed}, ${2:weaponType}, ${3:dps}, ${4:tech}, ${5:rarity}, ${6:material})"
    },
    {
      "text": "GenerateStationStyle",
      "snippet": "GenerateStationStyle(${1:seed}, ${2:noDisks}, ${3:noSpikes}, ${4:rings}, ${5:shape}, ${6:color1}, ${7:color2}, ${8:color3})"
    },
    {
      "text": "GenerateShipStyle",
      "snippet": "GenerateShipStyle(${1:seed}, ${2:noSpikes}, ${3:rings}, ${4:shape}, ${5color1}, ${6:color2}, ${7:color3})"
    },
    {
      "text": "GeneratePlanFromStyle",
      "snippet": "GeneratePlanFromStyle(${1:style}, ${2:seed}, ${3:volume}, ${4:maxBlocks}, ${5:scaleToFit}, ${6:material})"
    },
    {
      "text": "GeneratePlanFromFile",
      "snippet": "GeneratePlanFromFile(${1:file}, ${2:seed}, ${3:volume}, ${4:maxBlocks}, ${5:scaleToFit}, ${6:material})"
    },
    {
      "text": "LoadPlanFromFile",
      "snippet": "LoadPlanFromFile(${1:file})"
    },
    {
      "text": "CorrectInefficiencies",
      "snippet": "CorrectInefficiencies(${1:plan}, ${2:addEngines})"
    },
    {
      "text": "StationDescriptor",
      "snippet": "StationDescriptor()"
    },
    {
      "text": "ShipDescriptor",
      "snippet": "ShipDescriptor()"
    },
    {
      "text": "DroneDescriptor",
      "snippet": "DroneDescriptor()"
    },
    {
      "text": "AsteroidDescriptor",
      "snippet": "AsteroidDescriptor()"
    },
    {
      "text": "FighterDescriptor",
      "snippet": "FighterDescriptor()"
    },
    {
      "text": "WreckageDescriptor",
      "snippet": "WreckageDescriptor()"
    },
    {
      "text": "TurretDescriptor",
      "snippet": "TurretDescriptor()"
    },
    {
      "text": "WormholeDescriptor",
      "snippet": "WormholeDescriptor()"
    },
    {
      "text": "CargoLootDescriptor",
      "snippet": "CargoLootDescriptor()"
    },
    {
      "text": "CrewLootDescriptor",
      "snippet": "CrewLootDescriptor()"
    },
    {
      "text": "ColorLootDescriptor",
      "snippet": "ColorLootDescriptor()"
    },
    {
      "text": "TurretLootDescriptor",
      "snippet": "TurretLootDescriptor()"
    },
    {
      "text": "MoneyLootDescriptor",
      "snippet": "MoneyLootDescriptor()"
    },
    {
      "text": "ResourceLootDescriptor",
      "snippet": "ResourceLootDescriptor()"
    },
    {
      "text": "SystemUpgradeLootDescriptor",
      "snippet": "SystemUpgradeLootDescriptor()"
    },
    {
      "text": "CreateTemplateFromTurret",
      "snippet": "CreateTemplateFromTurret(${1:turret})"
    },
    {
      "text": "GenerateTurretTemplate",
      "snippet": "GenerateTurretTemplate(${1:seed}, ${2:weaponType}, ${3:dps}, ${4:tech}, ${5:rarity}, ${6:material})",
      "description": "Generates a turret with assigned values into the target slot. All other values will be chosen randomly, but matching to the given arguments."
    },
    {
      "text": "ColorPalette",
      "snippet": "ColorPalette()"
    },
    {
      "text": "getSectorSeed",
      "snippet": "getSectorSeed(${1:x}, ${2:y})"
    },
    {
      "text": "getGameSeed",
      "snippet": "getGameSeed()"
    },
    {
      "text": "getParentEntity",
      "snippet": "getParentEntity()"
    },
    {
      "text": "NumMaterials",
      "snippet": "NumMaterials()"
    },
    {
      "text": "IsValidMaterial",
      "snippet": "IsValidMaterial(${1:int})"
    },
    {
      "text": "SoundType",
      "type": "enum",
      "properties": [
        {
          "text": "Weapon",
          "type": "property"
        },
        {
          "text": "UI",
          "type": "property"
        },
        {
          "text": "Other",
          "type": "property"
        }
      ]
    },
    {
      "text": "StatsBonuses",
      "type": "enum",
      "properties": [
        {
          "text": "RadarReach",
          "type": "property"
        },
        {
          "text": "HiddenSectorRadarReach",
          "type": "property"
        },
        {
          "text": "ScannerReach",
          "type": "property"
        },
        {
          "text": "HyperspaceReach",
          "type": "property"
        },
        {
          "text": "HyperspaceCooldown",
          "type": "property"
        },
        {
          "text": "HyperspaceRechargeEnergy",
          "type": "property"
        },
        {
          "text": "ShieldDurability",
          "type": "property"
        },
        {
          "text": "ShieldRecharge",
          "type": "property"
        },
        {
          "text": "Velocity",
          "type": "property"
        },
        {
          "text": "Acceleration",
          "type": "property"
        },
        {
          "text": "GeneratedEnergy",
          "type": "property"
        },
        {
          "text": "EnergyCapacity",
          "type": "property"
        },
        {
          "text": "BatteryRecharge",
          "type": "property"
        },
        {
          "text": "ArbitraryTurrets",
          "type": "property"
        },
        {
          "text": "UnarmedTurrets",
          "type": "property"
        },
        {
          "text": "ArmedTurrets",
          "type": "property"
        },
        {
          "text": "CargoHold",
          "type": "property"
        },
        {
          "text": "Engineers",
          "type": "property"
        },
        {
          "text": "Mechanics",
          "type": "property"
        },
        {
          "text": "Gunners",
          "type": "property"
        },
        {
          "text": "Miners",
          "type": "property"
        },
        {
          "text": "Security",
          "type": "property"
        },
        {
          "text": "Attackers",
          "type": "property"
        },
        {
          "text": "Sergeants",
          "type": "property"
        },
        {
          "text": "Lieutenants",
          "type": "property"
        },
        {
          "text": "Commanders",
          "type": "property"
        },
        {
          "text": "Generals",
          "type": "property"
        },
        {
          "text": "Captains",
          "type": "property"
        }
      ]
    },
    {
      "text": "WeaponCategory",
      "type": "enum",
      "properties": [
        {
          "text": "Armed",
          "type": "property"
        },
        {
          "text": "Mining",
          "type": "property"
        },
        {
          "text": "Salvaging",
          "type": "property"
        },
        {
          "text": "Heal",
          "type": "property"
        }
      ]
    },
    {
      "text": "AIState",
      "type": "enum",
      "properties": [
        {
          "text": "None",
          "type": "property"
        },
        {
          "text": "Idle",
          "type": "property"
        },
        {
          "text": "Patrol",
          "type": "property"
        },
        {
          "text": "Escort",
          "type": "property"
        },
        {
          "text": "Aggressive",
          "type": "property"
        },
        {
          "text": "Passive",
          "type": "property"
        },
        {
          "text": "Guard",
          "type": "property"
        },
        {
          "text": "Jump",
          "type": "property"
        },
        {
          "text": "Fly",
          "type": "property"
        },
        {
          "text": "Attack",
          "type": "property"
        },
        {
          "text": "Follow",
          "type": "property"
        }
      ]
    },
    {
      "text": "AlliancePrivilege",
      "type": "enum",
      "properties": [
        {
          "text": "Invite",
          "type": "property"
        },
        {
          "text": "Kick",
          "type": "property"
        },
        {
          "text": "Promote",
          "type": "property"
        },
        {
          "text": "Demote",
          "type": "property"
        },
        {
          "text": "EditRanks",
          "type": "property"
        },
        {
          "text": "AddItems",
          "type": "property"
        },
        {
          "text": "SpendItems",
          "type": "property"
        },
        {
          "text": "TakeItems",
          "type": "property"
        },
        {
          "text": "AddResources",
          "type": "property"
        },
        {
          "text": "SpendResources",
          "type": "property"
        },
        {
          "text": "TakeResources",
          "type": "property"
        },
        {
          "text": "FoundShips",
          "type": "property"
        },
        {
          "text": "FoundStations",
          "type": "property"
        },
        {
          "text": "ManageStations",
          "type": "property"
        },
        {
          "text": "ManageShips",
          "type": "property"
        },
        {
          "text": "FlyCrafts",
          "type": "property"
        },
        {
          "text": "ModifyCrafts",
          "type": "property"
        },
        {
          "text": "ModifyMessageOfTheDay",
          "type": "property"
        }
      ]
    },
    {
      "text": "BlockType",
      "type": "enum",
      "properties": [
        {
          "text": "Hull",
          "type": "property"
        },
        {
          "text": "BlankHull",
          "type": "property"
        },
        {
          "text": "Engine",
          "type": "property"
        },
        {
          "text": "Thruster",
          "type": "property"
        },
        {
          "text": "CargoBay",
          "type": "property"
        },
        {
          "text": "Quarters",
          "type": "property"
        },
        {
          "text": "Dock",
          "type": "property"
        },
        {
          "text": "Stone",
          "type": "property"
        },
        {
          "text": "StoneEdge",
          "type": "property"
        },
        {
          "text": "StoneCorner",
          "type": "property"
        },
        {
          "text": "StoneOuterCorner",
          "type": "property"
        },
        {
          "text": "StoneInnerCorner",
          "type": "property"
        },
        {
          "text": "Glass",
          "type": "property"
        },
        {
          "text": "GlassEdge",
          "type": "property"
        },
        {
          "text": "GlassCorner",
          "type": "property"
        },
        {
          "text": "GlassOuterCorner",
          "type": "property"
        },
        {
          "text": "GlassInnerCorner",
          "type": "property"
        },
        {
          "text": "Reflector",
          "type": "property"
        },
        {
          "text": "ReflectorEdge",
          "type": "property"
        },
        {
          "text": "ReflectorCorner",
          "type": "property"
        },
        {
          "text": "ReflectorOuterCorner",
          "type": "property"
        },
        {
          "text": "ReflectorInnerCorner",
          "type": "property"
        },
        {
          "text": "ShieldGenerator",
          "type": "property"
        },
        {
          "text": "Generator",
          "type": "property"
        },
        {
          "text": "Armor",
          "type": "property"
        },
        {
          "text": "ComputerCore",
          "type": "property"
        },
        {
          "text": "SolarPanel",
          "type": "property"
        },
        {
          "text": "Light",
          "type": "property"
        },
        {
          "text": "EnergyContainer",
          "type": "property"
        },
        {
          "text": "Hangar",
          "type": "property"
        },
        {
          "text": "EdgeHull",
          "type": "property"
        },
        {
          "text": "CornerHull",
          "type": "property"
        },
        {
          "text": "OuterCornerHull",
          "type": "property"
        },
        {
          "text": "InnerCornerHull",
          "type": "property"
        },
        {
          "text": "EdgeArmor",
          "type": "property"
        },
        {
          "text": "CornerArmor",
          "type": "property"
        },
        {
          "text": "OuterCornerArmor",
          "type": "property"
        },
        {
          "text": "InnerCornerArmor",
          "type": "property"
        },
        {
          "text": "Glow",
          "type": "property"
        },
        {
          "text": "GlowEdge",
          "type": "property"
        },
        {
          "text": "GlowCorner",
          "type": "property"
        },
        {
          "text": "GlowOuterCorner",
          "type": "property"
        },
        {
          "text": "GlowInnerCorner",
          "type": "property"
        },
        {
          "text": "Halo",
          "type": "property"
        },
        {
          "text": "HaloEdge",
          "type": "property"
        },
        {
          "text": "HaloCorner",
          "type": "property"
        },
        {
          "text": "HaloOuterCorner",
          "type": "property"
        },
        {
          "text": "HaloInnerCorner",
          "type": "property"
        },
        {
          "text": "RichStone",
          "type": "property"
        },
        {
          "text": "RichStoneEdge",
          "type": "property"
        },
        {
          "text": "RichStoneCorner",
          "type": "property"
        },
        {
          "text": "RichStoneOuterCorner",
          "type": "property"
        },
        {
          "text": "RichStoneInnerCorner",
          "type": "property"
        },
        {
          "text": "Portal",
          "type": "property"
        },
        {
          "text": "TurretImmobilizer",
          "type": "property"
        }
      ]
    },
    {
      "text": "ChatMessageType",
      "type": "enum",
      "properties": [
        {
          "text": "Weapon",
          "type": "property"
        }
      ]
    },
    {
      "text": "ComponentType",
      "type": "enum",
      "properties": [
        {
          "text": "Weapon",
          "type": "property"
        }
      ]
    },
    {
      "text": "CrewProfessionType",
      "type": "enum",
      "properties": [
        {
          "text": "Weapon",
          "type": "property"
        }
      ]
    },
    {
      "text": "DamageType",
      "type": "enum",
      "properties": [
        {
          "text": "Weapon",
          "type": "property"
        }
      ]
    },
    {
      "text": "Difficulty",
      "type": "enum",
      "properties": [
        {
          "text": "Weapon",
          "type": "property"
        }
      ]
    },
    {
      "text": "EntityType",
      "type": "enum",
      "properties": [
        {
          "text": "Weapon",
          "type": "property"
        }
      ]
    },
    {
      "text": "FighterOrders",
      "type": "enum",
      "properties": [
        {
          "text": "Weapon",
          "type": "property"
        }
      ]
    },
    {
      "text": "FontType",
      "type": "enum",
      "properties": [
        {
          "text": "Weapon",
          "type": "property"
        }
      ]
    },
    {
      "text": "InventoryItemType",
      "type": "enum",
      "properties": [
        {
          "text": "Weapon",
          "type": "property"
        }
      ]
    },
    {
      "text": "MaterialType",
      "type": "enum",
      "properties": [
        {
          "text": "Weapon",
          "type": "property"
        }
      ]
    },
    {
      "text": "MoonType",
      "type": "enum",
      "properties": [
        {
          "text": "Weapon",
          "type": "property"
        }
      ]
    },
    {
      "text": "PlanetType",
      "type": "enum",
      "properties": [
        {
          "text": "Weapon",
          "type": "property"
        }
      ]
    },
    {
      "text": "RarityType",
      "type": "enum",
      "properties": [
        {
          "text": "Weapon",
          "type": "property"
        }
      ]
    }
  ]
}
